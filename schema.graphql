# time is an rfc 3339 timestamp
scalar Time
# Map is a k/v map where the key is a string and the value is any value
scalar Map

# Event is a specification for describing event data
type Event {
    # Identifies the event.
    id: String!
    # Identifies the channel/subject to which the event will be sent
    channel: String!
    # The event payload(structured).
    data: Map!
    # Arbitrary metadata about the event
    metadata: Map
    # The authentication claims of the event producer. This field is read-only & populated/overriden by the server before it is broadcasted to consumers.
    claims: Map!
    # Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    time: Time!
}

# EventInput constructs an event
input EventInput {
    # Identifies the event.
    id: String
    # Identifies the channel/subject to which the event will be sent
    channel: String!
    # The event payload(structured).
    data: Map!
    # Arbitrary metadata about the event
    metadata: Map
    # Timestamp of when the occurrence happened. Must adhere to RFC 3339.
    time: Time
}

# HistoryOpts are options when querying historical events
input HistoryOpts {
    channel: String!
    min: Time
    max: Time
    limit: Int
    offset: Int
}

# ReceiveOpts filters cloud events
input ReceiveOpts {
    channel: String!
}

type Query {
    # History returns an array of immutable historical events.
    history(input: HistoryOpts!): [Event!]
}

type Mutation {
    # Send broadcasts an event to all consumers on a given channel
    send(input: EventInput!): String
}

type Subscription {
    # Receive creates an event stream/subscription to a given channel until fn returns false OR the context cancels.
    receive(input: ReceiveOpts!): Event!
}