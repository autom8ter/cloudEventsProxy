syntax = "proto3";

package stategate;

option go_package = "stategate";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// StateGate is a pluggable API and "Application State Gateway" that enforces the [Event Sourcing Pattern](https://microservices.io/patterns/data/event-sourcing.html) for securely persisting & broadcasting application state changes

// EntityService serves API methods to clients that modify/query the current state of an entity
// An Entity is a single object with a type, domain, key, and k/v values
service EntityService {
  // Set sets the current state value of an entity, adds it to the event log, then broadcast the event to all interested consumers(EventService.Stream)
  rpc Set(Entity) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/entity/ref/{domain}/{type}/{key}"
    };
  }
  // Edit overwrites the k/v pairs present in the entity request without replacing the entire entity.
  // It then adds the state change to the event log, then broadcast the event to all interested consumers(EventService.Stream)
  // Edit returns the current state of the Entity after the mutation.
  rpc Edit(Entity) returns(Entity){
    option (google.api.http) = {
      patch: "/api/entity/ref/{domain}/{type}/{key}"
    };
  }
  // Revert reverts an Entity to a previous version of itself by querying the event store.
  // Reverting an entity dispatches another event since it is a state change
  rpc Revert(EventRef) returns(Entity) {
    option (google.api.http) = {
      put: "/api/entity/ref/{domain}/{type}/{key}/revert"
    };
  }
  // Get gets an entity's current state
  rpc Get(EntityRef) returns(Entity) {
    option (google.api.http) = {
      get: "/api/entity/ref/{domain}/{type}/{key}"
    };
  }
  // Del hard deletes an entity from current state store, adds it's state prior to deletion to the event log, then broadcast the event to all interested consumers(EventService.Stream)
  // an Entity may be recovered via querying the Event store for historical records of the deleted Entity.
  rpc Del(EntityRef) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/entity/ref/{domain}/{type}/{key}"
    };
  }
  // Search queries the current state of entities
  rpc Search(SearchEntityOpts) returns(Entities) {
    option (google.api.http) = {
      get: "/api/entity/search"
    };
  }
}

// EventService serves API methods related to stategate Event Consumers
// Events are automatically emitted from mutations made from State mutations within the EntityService
service EventService {
  // Stream creates an event stream/subscription to state changes to entities in real time. Glob matching is supported.
  rpc Stream(StreamEventOpts) returns(stream Event) {
    option (google.api.http) = {
      get: "/api/events/stream"
    };
  }
  // Search queries historical events - every historical state change to an entity may be queried.
  rpc Search(SearchEventOpts) returns(Events) {
    option (google.api.http) = {
      get: "/api/events/search"
    };
  }
  // Get gets a single event
  rpc Get(EventRef) returns(Event) {
    option (google.api.http) = {
      get: "/api/events/ref/{domain}/{type}/{key}/{id}"
    };
  }
}

// PeerService provides a means for clients to communicate directly with one another WITHOUT making any state changes.
// Please note that all messages transported via the PeerService are not persisted in any way.
service PeerService {
  // Broadcast broadcasts a message to N subscribers(clients calling Stream)
  rpc Broadcast(Message) returns(google.protobuf.Empty){
    option (google.api.http) = {
      post: "/api/peers/broadcast"
      body: "*"
    };
  }
  // Stream consumes/streams messages from message producers(clients calling broadcast)
  rpc Stream(StreamMessageOpts) returns(stream PeerMessage){
    option (google.api.http) = {
      get: "/api/peers/stream"
    };
  }
}

// EntityRef is a reference to an existing entity
message EntityRef {
  // the entity's business domain(ex: accounting)
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // entity type (ex: user)
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // entity key (unique within type)
  string key =3[(validator.field) = {regex : "^\\S+$"}];
}

// EventRef holds options for reverting an entity to a previous version of itself
message EventRef {
  // the entity's business domain(ex: accounting)
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // entity type (ex: user)
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // entity key (unique within type)
  string key =3[(validator.field) = {regex : "^\\S+$"}];
  // id is the event id.
  string id =4[(validator.field) = {uuid_ver : 4}];
}

// Entity represents a single record(k/v pairs) with a unique key with a given [type](https://en.wikipedia.org/wiki/Type_system), belonging to a particular [domain](https://en.wikipedia.org/wiki/Domain-driven_design)
// EventService clients should use the EntityService to persist & interact with the current state of an entity.
message Entity {
  // the entity's business domain(ex: accounting)
  // must not be empty or contain spaces
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // the entity's type (ex: user)
  // must not be empty or contain spaces
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // the entity's key (unique within type).
  // must not be empty or contain spaces
  string key =3[(validator.field) = {regex : "^\\S+$"}];
  // the entity's values (k/v pairs)
  google.protobuf.Struct values = 4[(validator.field) = {msg_exists : true}];
}

// StreamMessageOpts holds options for streaming messages produced by Peers
message StreamMessageOpts {
  // the message's business domain(ex: accounting) to subscribe to
  // must not be empty or contain spaces
  // * indicates any domain
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // the message's channel(ex: general) to subscribe to
  // must not be empty or contain spaces
  // * indicates any channel
  string channel =2[(validator.field) = {regex : "^\\S+$"}];
  // message's type (ex: comment) to subscribe to
  // must not be empty or contain spaces
  // * indicates any type
  string type =3[(validator.field) = {regex : "^\\S+$"}];
}

// Message is an arbitrary message to be delivered to a Peer
// Messages are NOT persisted and should only be used to communicate with other Peers
message Message {
  // the message's business domain(ex: accounting)
  // must not be empty or contain spaces
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // the message's channel(ex: general)
  // must not be empty or contain spaces
  string channel =2[(validator.field) = {regex : "^\\S+$"}];
  // message's type (ex: comment)
  // must not be empty or contain spaces
  string type =3[(validator.field) = {regex : "^\\S+$"}];
  // the body of the message(k/v values).
  google.protobuf.Struct body =4[(validator.field) = {msg_exists : true}];
}

// PeerMessage is a message produced by a client to the PeerService
// PeerMessages are NOT persisted and should only be used to communicate with other Peers
message PeerMessage {
  // the unique id of the message
  string id =1[(validator.field) = {uuid_ver : 4}];
  // the message's business domain(ex: accounting)
  // must not be empty or contain spaces
  string domain =2[(validator.field) = {regex : "^\\S+$"}];
  // the message's channel(ex: general)
  // must not be empty or contain spaces
  string channel =3[(validator.field) = {regex : "^\\S+$"}];
  // message's type (ex: comment)
  // must not be empty or contain spaces
  string type =4[(validator.field) = {regex : "^\\S+$"}];
  // the body of the message(k/v values).
  google.protobuf.Struct body =5[(validator.field) = {msg_exists : true}];
  // the authentication claims of the message producer.
  google.protobuf.Struct claims =6[(validator.field) = {msg_exists : true}];
  // timestamp(ns) of when the message was broadcasted.
  int64 time =7[(validator.field) = {int_gt : 0}];

}

// Entities is an array of Entity
message Entities {
  repeated Entity entities =1;
}

// SearchEntityOpts are options when querying the current values of entities.
// If historical values are needed, SearchEvents should be used
message SearchEntityOpts {
  // the entity's business domain(ex: accounting)
  // must not be empty or contain spaces
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // State type (ex: user)
  // must not be empty or contain spaces
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // json string to filter records that have values match k/v pairs ex: { "message": "hello world" }
  // please note that dot notation may be used to access nested fields
  string query_string = 3;
  // limit number of returned values
  int32 limit =4[(validator.field) = {int_gt : 0}];
  // offset returned events(pagination)
  int32 offset =5;
  // sort sorts the returned entities by a specified field
  Sort sort =9;
}


// SearchEventOpts are options when querying historical events emitted from mutations made from State mutations
message SearchEventOpts {
  // the entity's business domain(ex: accounting)
  // must not be empty or contain spaces
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // entity's type (ex: user)
  // must not be empty or contain spaces
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
  // please note that dot notation may be used to access nested fields
  string query_string = 4;
  // only return events that occurred after specified min timestamp
  int64 min = 5;
  // only return events that occurred before specified max timestamp
  int64 max = 6;
  // limit number of returned values
  int32 limit =7[(validator.field) = {int_gt : 0}];
  // offset returned events(pagination)
  int32 offset =8;
  // sort sorts the returned entities by a specified field
  Sort sort =9;
}

// StreamEventOpts are options for consumers looking to stream events.
// Events are automatically emitted from mutations made from State mutations within the EntityService
message StreamEventOpts {
  // the domain of the entity (ex: acme) that triggered the event
  // * indicates any domain
  // must not be empty or contain spaces
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // the type of the entity (ex: user) that triggered the event
  // * indicates any type
  // must not be empty or contain spaces
  string type =2[(validator.field) = {regex : "^\\S+$"}];
}

// Sort is a primitive used to sort an array
message Sort {
  // field is a field to sort the array by
  // please note that dot notation may be used to access nested fields
  string field =1;
  // reverse reverses the direction of the sort
  bool reverse =2;
}

// Event is primitive that represents a single state change to an entity
// Events are persisted to history & broadcasted to interested consumers(Stream) any time an entity is created/modified/deleted
// Events are immutable after creation and may be searched.
// EventService client's may search events to query previous state of an entity(s)
message Event {
  // identifies the event(uuid v4).
  string id = 1[(validator.field) = {uuid_ver : 4}];
  // state of an Entity after it has been mutated
  Entity entity = 2[(validator.field) = {msg_exists : true}];
  // the invoked method that triggered the event
  string method =5[(validator.field) = {string_not_empty : true}];
  // the authentication claims of the event producer.
  google.protobuf.Struct claims =3[(validator.field) = {msg_exists : true}];
  // timestamp(ns) of when the event was received.
  int64 time =4[(validator.field) = {int_gt : 0}];
}

// Events is an array of events
message Events {
  repeated Event events =1;
}
