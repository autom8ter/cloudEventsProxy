syntax = "proto3";

package eventgate;

option go_package = "eventgate";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// EventGateService is an identity-aware API gateway for message-queues/event sinks applications
// Pluggable backends include: [nats]
service EventGateService {
  // Broadcast an event(one way)
  rpc Send(Event) returns(google.protobuf.Empty){
    option (google.api.http) = {
      put: "/send"
      body: "*"
    };
  }
  // Request sends an event as a request and waits for an event as a response
  rpc Request(Event) returns(Event){
    option (google.api.http) = {
      put: "/request"
      body: "*"
    };
  }
  // Receive streams events to a client that pass a Filter
  rpc Receive(Filter) returns(stream Event){
    option (google.api.http) = {
      get: "/receive"
    };
  }
}


// Filter filters events before they are received by a consumer
message Filter {
  string channel =1[(validator.field) = {string_not_empty : true}];
}

// Event is a specification for describing event data
message Event {
  // Identifies the event. If an ID is not sent with the event, a uuid will be assigned
  string id = 1;
  // Identifies the channel/subject to which the event will be sent
  string channel = 2[(validator.field) = {string_not_empty : true}];
  // The event payload(structured).
  google.protobuf.Struct data = 5[(validator.field) = {msg_exists : true}];
  // Arbitrary metadata about the event
  map<string, string> metadata =6;
  // Timestamp of when the occurrence happened. Must adhere to RFC 3339. If a timestamp is not sent with the event, the current time will be assigned
  google.protobuf.Timestamp time =20;
}
