syntax = "proto3";

package stategate;

option go_package = "stategate";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// StateGate is a pluggable API and "Application State Gateway" that enforces the [Event Sourcing Pattern](https://microservices.io/patterns/data/event-sourcing.html) for securely persisting & broadcasting application state changes

// ObjectService serves API methods related to stategate Object producers
service ObjectService {
  // Set sets the current state value of an object, adds it to the event log, then broadcast the event to all interested consumers
  rpc Set(Object) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/objects/ref/{domain}/{type}/{key}"
    };
  }
  // Get gets an object's current state values
  rpc Get(ObjectRef) returns(Object) {
    option (google.api.http) = {
      get: "/api/objects/ref/{domain}/{type}/{key}"
    };
  }
  // Del hard deletes an object. Object's may be recovered via the Event store.
  rpc Del(ObjectRef) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/objects/ref/{domain}/{type}/{key}"
    };
  }
  // Search queries objects belonging to a particular domain & of a specific type
  rpc Search(SearchObjectOpts) returns(Objects) {
    option (google.api.http) = {
      get: "/api/objects/search"
    };
  }
}

// EventService serves API methods related to stategate Event Consumers
service EventService {
  // Stream creates an event stream/subscription to a given object type until fn returns false OR the context cancels.
  rpc Stream(StreamOpts) returns(stream Event) {
    option (google.api.http) = {
      get: "/api/events/stream"
    };
  }
  // Search queries events related to a specific object.
  rpc Search(SearchEventOpts) returns(Events) {
    option (google.api.http) = {
      get: "/api/events/search"
    };
  }
}

// ObjectRef is a reference to an existing object
message ObjectRef {
  // the object's business domain(ex: accounting)
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // Object type (ex: user)
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // Object key (unique within type)
  string key =3[(validator.field) = {regex : "^\\S+$"}];
}

// Object hold's the current state of an object
message Object {
  // the object's business domain(ex: accounting)
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // Object type (ex: user)
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // Object key (unique within type)
  string key =3[(validator.field) = {regex : "^\\S+$"}];
  // Object values (k/v pairs)
  google.protobuf.Struct values = 4[(validator.field) = {msg_exists : true}];
}

// Objects is an array of Object
message Objects {
  repeated Object objects =1;
}

// SearchObjectOpts are options when querying the current values of object(s).
// If historical values are needed, SearchEvents should be used
message SearchObjectOpts {
  // the object's business domain(ex: accounting)
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // Object type (ex: user)
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // json string to filter records that have values match k/v pairs ex: { "message": "hello world" }
  string query_string = 3;
  // limit returned objects
  int64 limit =4[(validator.field) = {int_gt : 0}];
  // offset returned events(pagination)
  int64 offset =5;
}

// SearchEventOpts are options when querying historical events for a given object
message SearchEventOpts {
  // the object's business domain(ex: accounting)
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // Object type (ex: user)
  string type =2[(validator.field) = {regex : "^\\S+$"}];
  // filter events belonging to a particular object
  string key = 3;
  // json string to filter records that have object's with values that match k/v pairs ex: { "message": "hello world" }
  string query_string = 4;
  // only return object events that occurred after specified min timestamp
  int64 min = 5;
  // only return object events that occurred before specified max timestamp
  int64 max = 6;
  // limit returned object events
  int64 limit =7[(validator.field) = {int_gt : 0}];
  // offset returned object events(pagination)
  int64 offset =8;
}

// StreamOpts are options for consumers looking to stream events
message StreamOpts {
  // the domain of the object (ex: acme) that triggered the event
  string domain =1[(validator.field) = {regex : "^\\S+$"}];
  // the type of the object (ex: user) that triggered the event
  string type =2[(validator.field) = {regex : "^\\S+$"}];
}

// Event is primitive that represents a single state change to an object, who triggered it, and the time it occurred.
// Events are persisted to history & broadcasted to interested consumers(Stream) any time an object is created/modified
message Event {
  // Identifies the event(uuid).
  string id = 1[(validator.field) = {uuid_ver : 0}];
  // the unmodified
  Object object = 2[(validator.field) = {msg_exists : true}];
  // The authentication claims of the event producer.
  google.protobuf.Struct claims =3[(validator.field) = {msg_exists : true}];
  // Timestamp(ns) of when the event was received.
  int64 time =4[(validator.field) = {int_gt : 0}];
}

// Events is an array of events
message Events {
  repeated Event events =1;
}
