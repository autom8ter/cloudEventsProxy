syntax = "proto3";

package eventgate;

option go_package = "eventgate";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// EventGateService is an identity-aware API gateway for event-sourcing based applications
service EventGateService {
  // Send broadcasts an event to all consumers on a given channel. Producers invoke this method.
  rpc Send(Event) returns(google.protobuf.Empty){
    option (google.api.http) = {
      post: "/send"
      body: "*"
    };
  }
  // Receive creates an event stream/subscription to a given channel until fn returns false OR the context cancels.
  // Event Consumers invoke this method.
  rpc Receive(ReceiveOpts) returns(stream EventDetail){
    option (google.api.http) = {
      get: "/receive"
    };
  }
  // History returns an array of immutable historical events.
  // Event Consumers invoke this method.
  rpc History(HistoryOpts) returns(EventDetails){
    option (google.api.http) = {
      get: "/history"
    };
  }
}

// HistoryOpts are options when querying historical events
message HistoryOpts {
  string channel =1[(validator.field) = {string_not_empty : true}];
  // only return events that occurred after specified min timestamp
  google.protobuf.Timestamp min = 2;
  // only return events that occurred before specified max timestamp
  google.protobuf.Timestamp max = 3;
  // limit returned events
  int64 limit =4[(validator.field) = {int_gt : 0}];;
  // offset returned events(pagination)
  int64 offset =5;
}

// ReceiveOpts filters events before they are received by a consumer
message ReceiveOpts {
  string channel =1[(validator.field) = {string_not_empty : true}];
}

// Event is a specification for describing event-sourced data
message Event {
  // Identifies the channel/subject to which the event will be sent
  string channel = 30[(validator.field) = {string_not_empty : true}];
  // The event payload(structured).
  google.protobuf.Struct data = 31[(validator.field) = {msg_exists : true}];
  // Arbitrary metadata about the event
  google.protobuf.Struct metadata =32;
}

// EventDetail wraps an Event with additional details.
message EventDetail {
  // Identifies the event(uuid).
  string id = 1[(validator.field) = {uuid_ver : 0}];
  // Identifies the channel/subject to which the event will be sent
  string channel = 30[(validator.field) = {string_not_empty : true}];
  // The event payload(structured).
  google.protobuf.Struct data = 31[(validator.field) = {msg_exists : true}];
  // Arbitrary metadata about the event
  google.protobuf.Struct metadata =32;
  // The authentication claims of the event producer.
  google.protobuf.Struct claims =2[(validator.field) = {msg_exists : true}];
  // Timestamp of when the event was received.
  google.protobuf.Timestamp time =3[(validator.field) = {msg_exists : true}];
}

// EventDetails is an array of event details
message EventDetails {
  repeated EventDetail events =1;
}
