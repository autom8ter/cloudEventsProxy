syntax = "proto3";

package stategate;

option go_package = "stategate";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// A pluggable API and "Application State Gateway" that enforces the [Event Sourcing Pattern](https://microservices.io/patterns/data/event-sourcing.html) for securely persisting & broadcasting application state changes
service StateGateService {
  // SetObject sets the current state value of an object, adds it to the event log, then broadcast the event to all interested consumers
  rpc SetObject(Object) returns(google.protobuf.Empty){
    option (google.api.http) = {
      post: "/api/{type}/state/{key}"
    };
  }
  // GetObject gets an object's current state values
  rpc GetObject(ObjectRef) returns(Object){
    option (google.api.http) = {
      get: "/api/{type}/state/{key}"
    };
  }
  // StreamEvents creates an event stream/subscription to a given object type until fn returns false OR the context cancels.
  // Event Consumers invoke this method.
  rpc StreamEvents(StreamOpts) returns(stream Event){
    option (google.api.http) = {
      get: "/api/{type}/events"
    };
  }
  // SearchEvents returns an array of immutable historical events for a given object.
  rpc SearchEvents(SearchOpts) returns(Events){
    option (google.api.http) = {
      get: "/api/{type}/events/{key}"
    };
  }
}

// ObjectRef is a reference to an existing object
message ObjectRef {
  // Object type (ex: user)
  string type =1[(validator.field) = {string_not_empty : true}];
  // Object key (unique within type)
  string key =2[(validator.field) = {string_not_empty : true}];
}

// Object hold's the current state of an object
message Object {
  // Object type (ex: user)
  string type =1[(validator.field) = {string_not_empty : true}];
  // Object key (unique within type)
  string key =2[(validator.field) = {string_not_empty : true}];
  // Object values (structured k/v pairs)
  google.protobuf.Struct values = 3[(validator.field) = {msg_exists : true}];
}

// SearchOpts are options when querying historical events for a given object
message SearchOpts {
  // Object type (ex: user)
  string type =1[(validator.field) = {string_not_empty : true}];
  // Object key (unique within type)
  string key =2[(validator.field) = {string_not_empty : true}];
  // only return events that occurred after specified min timestamp
  int64 min = 3;
  // only return events that occurred before specified max timestamp
  int64 max = 4;
  // limit returned events
  int64 limit =5[(validator.field) = {int_gt : 0}];
  // offset returned events(pagination)
  int64 offset =6;
}

// StreamOpts are options for consumers looking to stream events
message StreamOpts {
  string type =1[(validator.field) = {string_not_empty : true}];
}

// Event is primitive that represents a single state change to an object, who triggered it, and the time it occurred.
// Events are persisted to history & broadcasted to interested consumers(Stream) any time an object is created/modified
message Event {
  // Identifies the event(uuid).
  string id = 1[(validator.field) = {uuid_ver : 0}];
  // the unmodified
  Object object = 2[(validator.field) = {msg_exists : true}];
  // The authentication claims of the event producer.
  google.protobuf.Struct claims =3[(validator.field) = {msg_exists : true}];
  // Timestamp(ns) of when the event was received.
  int64 time =4[(validator.field) = {int_gt : 0}];
}

// Events is an array of events
message Events {
  repeated Event events =1;
}
