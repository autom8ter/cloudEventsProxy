syntax = "proto3";

package eventgate;

option go_package = "eventgate";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// EventGateService is an identity-aware API gateway for CloudEvents applications
// Pluggable backends include: [nats]
service EventGateService {
  // Broadcast an event(one way)
  rpc Send(CloudEvent) returns(google.protobuf.Empty){
    option (google.api.http) = {
      put: "/send"
      body: "*"
    };
  }
  // Request sends an event as a request and waits for an event as a response
  rpc Request(CloudEvent) returns(CloudEvent){
    option (google.api.http) = {
      put: "/request"
      body: "*"
    };
  }
  // Receive streams events to a client that pass a Filter
  rpc Receive(Filter) returns(stream CloudEvent){
    option (google.api.http) = {
      get: "/receive"
    };
  }
}


// Filter filters cloud events
message Filter {
  map<string, string> matchers =1[(validator.field) = {msg_exists : true}];
}

// CloudEvent is a specification for describing event data ref: https://cloudevents.io/
message CloudEvent {
  // Identifies the event. If an ID is not sent with the event, a uuid will be assigned
  string id = 1;
  // The version of the CloudEvents specification which the event uses.
  string specversion = 2[(validator.field) = {string_not_empty : true}];
  // Identifies the context in which an event happened.
  string source = 3[(validator.field) = {string_not_empty : true}];
  // Describes the type of event related to the originating occurrence.
  string type = 4[(validator.field) = {string_not_empty : true}];
  // Describes the subject of the event in the context of the event producer (identified by source).
  string subject =5;
  // Identifies the schema that data adheres to.
  string dataschema =6;
  // Content type of the data value. Must adhere to RFC 2046 format.
  string datacontenttype =7;
  // The event payload(structured).
  google.protobuf.Struct data = 8;
  // Base64 encoded event payload. Must adhere to RFC4648.
  string data_base64 =9;
  // Timestamp of when the occurrence happened. Must adhere to RFC 3339. If a timestamp is not sent with the event, the current time will be assigned
  google.protobuf.Timestamp time =20;
}
