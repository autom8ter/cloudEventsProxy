<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: schema.proto

namespace Stategate;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * SearchEventOpts are options when querying historical events emitted from mutations made from State mutations
 *
 * Generated from protobuf message <code>stategate.SearchEventOpts</code>
 */
class SearchEventOpts extends \Google\Protobuf\Internal\Message
{
    /**
     * the entity's business domain(ex: accounting)
     * must not be empty or contain spaces
     *
     * Generated from protobuf field <code>string domain = 1 [(.validator.field) = {</code>
     */
    private $domain = '';
    /**
     * entity's type (ex: user)
     * must not be empty or contain spaces
     *
     * Generated from protobuf field <code>string type = 2 [(.validator.field) = {</code>
     */
    private $type = '';
    /**
     * json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
     * please note that dot notation may be used to access nested fields
     *
     * Generated from protobuf field <code>string query_string = 4;</code>
     */
    private $query_string = '';
    /**
     * only return events that occurred after specified min timestamp
     *
     * Generated from protobuf field <code>int64 min = 5;</code>
     */
    private $min = 0;
    /**
     * only return events that occurred before specified max timestamp
     *
     * Generated from protobuf field <code>int64 max = 6;</code>
     */
    private $max = 0;
    /**
     * limit number of returned values
     *
     * Generated from protobuf field <code>int64 limit = 7 [(.validator.field) = {</code>
     */
    private $limit = 0;
    /**
     * offset returned events(pagination)
     *
     * Generated from protobuf field <code>int64 offset = 8;</code>
     */
    private $offset = 0;
    /**
     * sort sorts the returned entities by a specified field
     *
     * Generated from protobuf field <code>.stategate.Sort sort = 9;</code>
     */
    private $sort = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $domain
     *           the entity's business domain(ex: accounting)
     *           must not be empty or contain spaces
     *     @type string $type
     *           entity's type (ex: user)
     *           must not be empty or contain spaces
     *     @type string $query_string
     *           json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
     *           please note that dot notation may be used to access nested fields
     *     @type int|string $min
     *           only return events that occurred after specified min timestamp
     *     @type int|string $max
     *           only return events that occurred before specified max timestamp
     *     @type int|string $limit
     *           limit number of returned values
     *     @type int|string $offset
     *           offset returned events(pagination)
     *     @type \Stategate\Sort $sort
     *           sort sorts the returned entities by a specified field
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Schema::initOnce();
        parent::__construct($data);
    }

    /**
     * the entity's business domain(ex: accounting)
     * must not be empty or contain spaces
     *
     * Generated from protobuf field <code>string domain = 1 [(.validator.field) = {</code>
     * @return string
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * the entity's business domain(ex: accounting)
     * must not be empty or contain spaces
     *
     * Generated from protobuf field <code>string domain = 1 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setDomain($var)
    {
        GPBUtil::checkString($var, True);
        $this->domain = $var;

        return $this;
    }

    /**
     * entity's type (ex: user)
     * must not be empty or contain spaces
     *
     * Generated from protobuf field <code>string type = 2 [(.validator.field) = {</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * entity's type (ex: user)
     * must not be empty or contain spaces
     *
     * Generated from protobuf field <code>string type = 2 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

    /**
     * json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
     * please note that dot notation may be used to access nested fields
     *
     * Generated from protobuf field <code>string query_string = 4;</code>
     * @return string
     */
    public function getQueryString()
    {
        return $this->query_string;
    }

    /**
     * json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
     * please note that dot notation may be used to access nested fields
     *
     * Generated from protobuf field <code>string query_string = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setQueryString($var)
    {
        GPBUtil::checkString($var, True);
        $this->query_string = $var;

        return $this;
    }

    /**
     * only return events that occurred after specified min timestamp
     *
     * Generated from protobuf field <code>int64 min = 5;</code>
     * @return int|string
     */
    public function getMin()
    {
        return $this->min;
    }

    /**
     * only return events that occurred after specified min timestamp
     *
     * Generated from protobuf field <code>int64 min = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMin($var)
    {
        GPBUtil::checkInt64($var);
        $this->min = $var;

        return $this;
    }

    /**
     * only return events that occurred before specified max timestamp
     *
     * Generated from protobuf field <code>int64 max = 6;</code>
     * @return int|string
     */
    public function getMax()
    {
        return $this->max;
    }

    /**
     * only return events that occurred before specified max timestamp
     *
     * Generated from protobuf field <code>int64 max = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMax($var)
    {
        GPBUtil::checkInt64($var);
        $this->max = $var;

        return $this;
    }

    /**
     * limit number of returned values
     *
     * Generated from protobuf field <code>int64 limit = 7 [(.validator.field) = {</code>
     * @return int|string
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * limit number of returned values
     *
     * Generated from protobuf field <code>int64 limit = 7 [(.validator.field) = {</code>
     * @param int|string $var
     * @return $this
     */
    public function setLimit($var)
    {
        GPBUtil::checkInt64($var);
        $this->limit = $var;

        return $this;
    }

    /**
     * offset returned events(pagination)
     *
     * Generated from protobuf field <code>int64 offset = 8;</code>
     * @return int|string
     */
    public function getOffset()
    {
        return $this->offset;
    }

    /**
     * offset returned events(pagination)
     *
     * Generated from protobuf field <code>int64 offset = 8;</code>
     * @param int|string $var
     * @return $this
     */
    public function setOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->offset = $var;

        return $this;
    }

    /**
     * sort sorts the returned entities by a specified field
     *
     * Generated from protobuf field <code>.stategate.Sort sort = 9;</code>
     * @return \Stategate\Sort
     */
    public function getSort()
    {
        return $this->sort;
    }

    /**
     * sort sorts the returned entities by a specified field
     *
     * Generated from protobuf field <code>.stategate.Sort sort = 9;</code>
     * @param \Stategate\Sort $var
     * @return $this
     */
    public function setSort($var)
    {
        GPBUtil::checkMessage($var, \Stategate\Sort::class);
        $this->sort = $var;

        return $this;
    }

}

