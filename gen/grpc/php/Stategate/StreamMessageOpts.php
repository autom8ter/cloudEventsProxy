<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: schema.proto

namespace Stategate;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * StreamMessageOpts holds options for streaming messages produced by Peers
 *
 * Generated from protobuf message <code>stategate.StreamMessageOpts</code>
 */
class StreamMessageOpts extends \Google\Protobuf\Internal\Message
{
    /**
     * the message's business domain(ex: accounting) to subscribe to
     * must not be empty or contain spaces
     * * indicates any domain
     *
     * Generated from protobuf field <code>string domain = 1 [(.validator.field) = {</code>
     */
    private $domain = '';
    /**
     * the message's channel(ex: general) to subscribe to
     * must not be empty or contain spaces
     * * indicates any channel
     *
     * Generated from protobuf field <code>string channel = 2 [(.validator.field) = {</code>
     */
    private $channel = '';
    /**
     * message's type (ex: comment) to subscribe to
     * must not be empty or contain spaces
     * * indicates any type
     *
     * Generated from protobuf field <code>string type = 3 [(.validator.field) = {</code>
     */
    private $type = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $domain
     *           the message's business domain(ex: accounting) to subscribe to
     *           must not be empty or contain spaces
     *           * indicates any domain
     *     @type string $channel
     *           the message's channel(ex: general) to subscribe to
     *           must not be empty or contain spaces
     *           * indicates any channel
     *     @type string $type
     *           message's type (ex: comment) to subscribe to
     *           must not be empty or contain spaces
     *           * indicates any type
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Schema::initOnce();
        parent::__construct($data);
    }

    /**
     * the message's business domain(ex: accounting) to subscribe to
     * must not be empty or contain spaces
     * * indicates any domain
     *
     * Generated from protobuf field <code>string domain = 1 [(.validator.field) = {</code>
     * @return string
     */
    public function getDomain()
    {
        return $this->domain;
    }

    /**
     * the message's business domain(ex: accounting) to subscribe to
     * must not be empty or contain spaces
     * * indicates any domain
     *
     * Generated from protobuf field <code>string domain = 1 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setDomain($var)
    {
        GPBUtil::checkString($var, True);
        $this->domain = $var;

        return $this;
    }

    /**
     * the message's channel(ex: general) to subscribe to
     * must not be empty or contain spaces
     * * indicates any channel
     *
     * Generated from protobuf field <code>string channel = 2 [(.validator.field) = {</code>
     * @return string
     */
    public function getChannel()
    {
        return $this->channel;
    }

    /**
     * the message's channel(ex: general) to subscribe to
     * must not be empty or contain spaces
     * * indicates any channel
     *
     * Generated from protobuf field <code>string channel = 2 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setChannel($var)
    {
        GPBUtil::checkString($var, True);
        $this->channel = $var;

        return $this;
    }

    /**
     * message's type (ex: comment) to subscribe to
     * must not be empty or contain spaces
     * * indicates any type
     *
     * Generated from protobuf field <code>string type = 3 [(.validator.field) = {</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * message's type (ex: comment) to subscribe to
     * must not be empty or contain spaces
     * * indicates any type
     *
     * Generated from protobuf field <code>string type = 3 [(.validator.field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

}

