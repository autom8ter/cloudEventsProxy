// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: schema.proto

package stategate

import (
	context "context"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MutexRef is a reference to a distributed mutex
type MutexRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the mutex's business domain(ex: accounting)
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// mutex key (unique within domain)
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MutexRef) Reset() {
	*x = MutexRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutexRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutexRef) ProtoMessage() {}

func (x *MutexRef) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutexRef.ProtoReflect.Descriptor instead.
func (*MutexRef) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

func (x *MutexRef) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MutexRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// CacheRef is a reference to a cached value
type CacheRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the cached value's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// cached value's key (unique within domain)
	// must not be empty or contain spaces
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CacheRef) Reset() {
	*x = CacheRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheRef) ProtoMessage() {}

func (x *CacheRef) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheRef.ProtoReflect.Descriptor instead.
func (*CacheRef) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{1}
}

func (x *CacheRef) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CacheRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// EntityRef is a reference to an existing entity
type EntityRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the entity's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// entity type (ex: user)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// entity key (unique within type)
	// must not be empty or contain spaces
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *EntityRef) Reset() {
	*x = EntityRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRef) ProtoMessage() {}

func (x *EntityRef) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRef.ProtoReflect.Descriptor instead.
func (*EntityRef) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{2}
}

func (x *EntityRef) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *EntityRef) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EntityRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// EventRef holds options for reverting an entity to a previous version of itself
type EventRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the event's entity's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// event entity type (ex: user)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// event's entity's key (unique within type)
	// must not be empty or contain spaces
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// id is the event id.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventRef) Reset() {
	*x = EventRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRef) ProtoMessage() {}

func (x *EventRef) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRef.ProtoReflect.Descriptor instead.
func (*EventRef) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{3}
}

func (x *EventRef) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *EventRef) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Entity represents a single record(k/v pairs) with a unique key with a given [type](https://en.wikipedia.org/wiki/Type_system), belonging to a particular [domain](https://en.wikipedia.org/wiki/Domain-driven_design)
// EventService clients should use the EntityService to persist & interact with the current state of an entity.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the entity's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the entity's type (ex: user)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// the entity's key (unique within type).
	// must not be empty or contain spaces
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// the entity's values (k/v pairs)
	Values *_struct.Struct `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Entity) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Entity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Entity) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Entity) GetValues() *_struct.Struct {
	if x != nil {
		return x.Values
	}
	return nil
}

// StreamMessageOpts holds options for streaming messages produced by Peers
type StreamMessageOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the message's business domain(ex: accounting) to subscribe to
	// must not be empty or contain spaces
	// * indicates any domain
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the message's channel(ex: general) to subscribe to
	// must not be empty or contain spaces
	// * indicates any channel
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// message's type (ex: comment) to subscribe to
	// must not be empty or contain spaces
	// * indicates any type
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *StreamMessageOpts) Reset() {
	*x = StreamMessageOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessageOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessageOpts) ProtoMessage() {}

func (x *StreamMessageOpts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessageOpts.ProtoReflect.Descriptor instead.
func (*StreamMessageOpts) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{5}
}

func (x *StreamMessageOpts) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StreamMessageOpts) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *StreamMessageOpts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Message is an arbitrary message to be delivered to a Peer
// Messages are NOT persisted and should only be used to communicate with other Peers
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the message's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the message's channel(ex: general)
	// must not be empty or contain spaces
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// message's type (ex: comment)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// the body of the message(k/v values).
	Body *_struct.Struct `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{6}
}

func (x *Message) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Message) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetBody() *_struct.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

// Mutex is a distributed mutex for preventing data-races amongst peer services
type Mutex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the mutex's business domain(ex: accounting)
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// mutex key (unique within domain)
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// exp is the time at which the mutex value will expire
	// if exp is 0, the mutex will never expire
	Exp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *Mutex) Reset() {
	*x = Mutex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutex) ProtoMessage() {}

func (x *Mutex) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutex.ProtoReflect.Descriptor instead.
func (*Mutex) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{7}
}

func (x *Mutex) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Mutex) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Mutex) GetExp() *timestamp.Timestamp {
	if x != nil {
		return x.Exp
	}
	return nil
}

// Cache is a persisted value that will expire after a period of time. It is held in memory for maximum performance.
type Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the cached value's business domain(ex: accounting)
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the cached value's key (unique within domain)
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// the cached value's value to store
	Value *_struct.Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// exp is the time at which the cached value will expire
	// if exp is 0, the value will never expire
	Exp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *Cache) Reset() {
	*x = Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Cache) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Cache) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Cache) GetValue() *_struct.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Cache) GetExp() *timestamp.Timestamp {
	if x != nil {
		return x.Exp
	}
	return nil
}

// PeerMessage is a message produced by a client to the PeerService
// PeerMessages are NOT persisted and should only be used to communicate with other Peers
type PeerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique id of the message
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the message's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// the message's channel(ex: general)
	// must not be empty or contain spaces
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	// message's type (ex: comment)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// the body of the message(k/v values).
	Body *_struct.Struct `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	// the authentication claims of the message producer.
	Claims *_struct.Struct `protobuf:"bytes,6,opt,name=claims,proto3" json:"claims,omitempty"`
	// timestamp(ns) of when the message was broadcasted.
	Time int64 `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *PeerMessage) Reset() {
	*x = PeerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMessage) ProtoMessage() {}

func (x *PeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMessage.ProtoReflect.Descriptor instead.
func (*PeerMessage) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{9}
}

func (x *PeerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerMessage) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PeerMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PeerMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PeerMessage) GetBody() *_struct.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *PeerMessage) GetClaims() *_struct.Struct {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *PeerMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Entities is an array of Entity
type Entities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *Entities) Reset() {
	*x = Entities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entities) ProtoMessage() {}

func (x *Entities) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entities.ProtoReflect.Descriptor instead.
func (*Entities) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{10}
}

func (x *Entities) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// SearchEntityOpts are options when querying the current values of entities.
// If historical values are needed, SearchEvents should be used
type SearchEntityOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the entity's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// State type (ex: user)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// json string to filter records that have values match k/v pairs ex: { "message": "hello world" }
	// please note that dot notation may be used to access nested fields
	QueryString string `protobuf:"bytes,3,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	// limit number of returned values
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// offset returned events(pagination)
	Offset int32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// sort sorts the returned entities by a specified field
	Sort *Sort `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *SearchEntityOpts) Reset() {
	*x = SearchEntityOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntityOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntityOpts) ProtoMessage() {}

func (x *SearchEntityOpts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntityOpts.ProtoReflect.Descriptor instead.
func (*SearchEntityOpts) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{11}
}

func (x *SearchEntityOpts) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SearchEntityOpts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SearchEntityOpts) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *SearchEntityOpts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchEntityOpts) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchEntityOpts) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// SearchEventOpts are options when querying historical events emitted from mutations made from State mutations
type SearchEventOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the entity's business domain(ex: accounting)
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// entity's type (ex: user)
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
	// please note that dot notation may be used to access nested fields
	QueryString string `protobuf:"bytes,4,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	// only return events that occurred after specified min timestamp
	Min int64 `protobuf:"varint,5,opt,name=min,proto3" json:"min,omitempty"`
	// only return events that occurred before specified max timestamp
	Max int64 `protobuf:"varint,6,opt,name=max,proto3" json:"max,omitempty"`
	// limit number of returned values
	Limit int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	// offset returned events(pagination)
	Offset int32 `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	// sort sorts the returned entities by a specified field
	Sort *Sort `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *SearchEventOpts) Reset() {
	*x = SearchEventOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEventOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEventOpts) ProtoMessage() {}

func (x *SearchEventOpts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEventOpts.ProtoReflect.Descriptor instead.
func (*SearchEventOpts) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{12}
}

func (x *SearchEventOpts) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SearchEventOpts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SearchEventOpts) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *SearchEventOpts) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SearchEventOpts) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SearchEventOpts) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchEventOpts) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchEventOpts) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// StreamEventOpts are options for consumers looking to stream events.
// Events are automatically emitted from mutations made from State mutations within the EntityService
type StreamEventOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the domain of the entity (ex: acme) that triggered the event
	// * indicates any domain
	// must not be empty or contain spaces
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the type of the entity (ex: user) that triggered the event
	// * indicates any type
	// must not be empty or contain spaces
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *StreamEventOpts) Reset() {
	*x = StreamEventOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventOpts) ProtoMessage() {}

func (x *StreamEventOpts) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventOpts.ProtoReflect.Descriptor instead.
func (*StreamEventOpts) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13}
}

func (x *StreamEventOpts) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *StreamEventOpts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Sort is a primitive used to sort an array
type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field is a field to sort the array by
	// please note that dot notation may be used to access nested fields
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// reverse reverses the direction of the sort
	Reverse bool `protobuf:"varint,2,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{14}
}

func (x *Sort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Sort) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// Event is primitive that represents a single state change to an entity
// Events are persisted to history & broadcasted to interested consumers(Stream) any time an entity is created/modified/deleted
// Events are immutable after creation and may be searched.
// EventService client's may search events to query previous state of an entity(s)
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifies the event(uuid v4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// state of an Entity after it has been mutated
	Entity *Entity `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	// the invoked method that triggered the event
	Method string `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	// the authentication claims of the event producer.
	Claims *_struct.Struct `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
	// timestamp(ns) of when the event was received.
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{15}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Event) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Event) GetClaims() *_struct.Struct {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *Event) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Events is an array of events
type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{16}
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_schema_proto protoreflect.FileDescriptor

var file_schema_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b,
	0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x52,
	0x65, 0x66, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b,
	0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b,
	0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x70, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c,
	0x53, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c,
	0x53, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53,
	0x2b, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05,
	0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05,
	0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x90, 0x01, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05,
	0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x25, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53,
	0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x79, 0x0a,
	0x05, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c,
	0x53, 0x2b, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05,
	0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b,
	0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0x9d, 0x02, 0x0a, 0x0b, 0x50,
	0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x90, 0x01, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a,
	0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x1a,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xf9,
	0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53,
	0x2b, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x0a, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x90, 0x01, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xd0, 0x04, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x03,
	0x53, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d,
	0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x5b, 0x0a,
	0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x32, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x74,
	0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x66, 0x0a, 0x06, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x1a, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b,
	0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x5d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x1a,
	0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x7d, 0x12, 0x62, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x12, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x66, 0x2f,
	0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f,
	0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x56, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x13, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x32, 0x98, 0x02,
	0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x73, 0x1a, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x5f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x13,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x1a, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6b,
	0x65, 0x79, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0xc2, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0x5a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x32, 0x96, 0x02,
	0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d,
	0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x53, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x66, 0x1a, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x59, 0x0a, 0x03, 0x44,
	0x65, 0x6c, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d,
	0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x32, 0xc5, 0x01, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x65, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x65,
	0x78, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x2f, 0x72, 0x65,
	0x66, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d,
	0x12, 0x5c, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x78, 0x52, 0x65, 0x66, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x2f, 0x72, 0x65, 0x66, 0x2f,
	0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x42, 0x0b,
	0x5a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x67, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_schema_proto_rawDescOnce sync.Once
	file_schema_proto_rawDescData = file_schema_proto_rawDesc
)

func file_schema_proto_rawDescGZIP() []byte {
	file_schema_proto_rawDescOnce.Do(func() {
		file_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_proto_rawDescData)
	})
	return file_schema_proto_rawDescData
}

var file_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_schema_proto_goTypes = []interface{}{
	(*MutexRef)(nil),            // 0: stategate.MutexRef
	(*CacheRef)(nil),            // 1: stategate.CacheRef
	(*EntityRef)(nil),           // 2: stategate.EntityRef
	(*EventRef)(nil),            // 3: stategate.EventRef
	(*Entity)(nil),              // 4: stategate.Entity
	(*StreamMessageOpts)(nil),   // 5: stategate.StreamMessageOpts
	(*Message)(nil),             // 6: stategate.Message
	(*Mutex)(nil),               // 7: stategate.Mutex
	(*Cache)(nil),               // 8: stategate.Cache
	(*PeerMessage)(nil),         // 9: stategate.PeerMessage
	(*Entities)(nil),            // 10: stategate.Entities
	(*SearchEntityOpts)(nil),    // 11: stategate.SearchEntityOpts
	(*SearchEventOpts)(nil),     // 12: stategate.SearchEventOpts
	(*StreamEventOpts)(nil),     // 13: stategate.StreamEventOpts
	(*Sort)(nil),                // 14: stategate.Sort
	(*Event)(nil),               // 15: stategate.Event
	(*Events)(nil),              // 16: stategate.Events
	(*_struct.Struct)(nil),      // 17: google.protobuf.Struct
	(*timestamp.Timestamp)(nil), // 18: google.protobuf.Timestamp
	(*_struct.Value)(nil),       // 19: google.protobuf.Value
	(*empty.Empty)(nil),         // 20: google.protobuf.Empty
}
var file_schema_proto_depIdxs = []int32{
	17, // 0: stategate.Entity.values:type_name -> google.protobuf.Struct
	17, // 1: stategate.Message.body:type_name -> google.protobuf.Struct
	18, // 2: stategate.Mutex.exp:type_name -> google.protobuf.Timestamp
	19, // 3: stategate.Cache.value:type_name -> google.protobuf.Value
	18, // 4: stategate.Cache.exp:type_name -> google.protobuf.Timestamp
	17, // 5: stategate.PeerMessage.body:type_name -> google.protobuf.Struct
	17, // 6: stategate.PeerMessage.claims:type_name -> google.protobuf.Struct
	4,  // 7: stategate.Entities.entities:type_name -> stategate.Entity
	14, // 8: stategate.SearchEntityOpts.sort:type_name -> stategate.Sort
	14, // 9: stategate.SearchEventOpts.sort:type_name -> stategate.Sort
	4,  // 10: stategate.Event.entity:type_name -> stategate.Entity
	17, // 11: stategate.Event.claims:type_name -> google.protobuf.Struct
	15, // 12: stategate.Events.events:type_name -> stategate.Event
	4,  // 13: stategate.EntityService.Set:input_type -> stategate.Entity
	4,  // 14: stategate.EntityService.Edit:input_type -> stategate.Entity
	3,  // 15: stategate.EntityService.Revert:input_type -> stategate.EventRef
	2,  // 16: stategate.EntityService.Get:input_type -> stategate.EntityRef
	2,  // 17: stategate.EntityService.Del:input_type -> stategate.EntityRef
	11, // 18: stategate.EntityService.Search:input_type -> stategate.SearchEntityOpts
	13, // 19: stategate.EventService.Stream:input_type -> stategate.StreamEventOpts
	12, // 20: stategate.EventService.Search:input_type -> stategate.SearchEventOpts
	3,  // 21: stategate.EventService.Get:input_type -> stategate.EventRef
	6,  // 22: stategate.PeerService.Broadcast:input_type -> stategate.Message
	5,  // 23: stategate.PeerService.Stream:input_type -> stategate.StreamMessageOpts
	8,  // 24: stategate.CacheService.Set:input_type -> stategate.Cache
	1,  // 25: stategate.CacheService.Get:input_type -> stategate.CacheRef
	1,  // 26: stategate.CacheService.Del:input_type -> stategate.CacheRef
	7,  // 27: stategate.MutexService.Lock:input_type -> stategate.Mutex
	0,  // 28: stategate.MutexService.Unlock:input_type -> stategate.MutexRef
	20, // 29: stategate.EntityService.Set:output_type -> google.protobuf.Empty
	4,  // 30: stategate.EntityService.Edit:output_type -> stategate.Entity
	4,  // 31: stategate.EntityService.Revert:output_type -> stategate.Entity
	4,  // 32: stategate.EntityService.Get:output_type -> stategate.Entity
	20, // 33: stategate.EntityService.Del:output_type -> google.protobuf.Empty
	10, // 34: stategate.EntityService.Search:output_type -> stategate.Entities
	15, // 35: stategate.EventService.Stream:output_type -> stategate.Event
	16, // 36: stategate.EventService.Search:output_type -> stategate.Events
	15, // 37: stategate.EventService.Get:output_type -> stategate.Event
	20, // 38: stategate.PeerService.Broadcast:output_type -> google.protobuf.Empty
	9,  // 39: stategate.PeerService.Stream:output_type -> stategate.PeerMessage
	20, // 40: stategate.CacheService.Set:output_type -> google.protobuf.Empty
	8,  // 41: stategate.CacheService.Get:output_type -> stategate.Cache
	20, // 42: stategate.CacheService.Del:output_type -> google.protobuf.Empty
	20, // 43: stategate.MutexService.Lock:output_type -> google.protobuf.Empty
	20, // 44: stategate.MutexService.Unlock:output_type -> google.protobuf.Empty
	29, // [29:45] is the sub-list for method output_type
	13, // [13:29] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_schema_proto_init() }
func file_schema_proto_init() {
	if File_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutexRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessageOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntityOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEventOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_schema_proto_goTypes,
		DependencyIndexes: file_schema_proto_depIdxs,
		MessageInfos:      file_schema_proto_msgTypes,
	}.Build()
	File_schema_proto = out.File
	file_schema_proto_rawDesc = nil
	file_schema_proto_goTypes = nil
	file_schema_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntityServiceClient interface {
	// Set sets the current state value of an entity, adds it to the event log, then broadcast the event to all interested consumers(EventService.Stream)
	Set(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*empty.Empty, error)
	// Edit overwrites the k/v pairs present in the entity request without replacing the entire entity.
	// It then adds the state change to the event log, then broadcast the event to all interested consumers(EventService.Stream)
	// Edit returns the current state of the Entity after the mutation.
	Edit(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	// Revert reverts an Entity to a previous version of itself by querying the event store.
	// Reverting an entity dispatches another event since it is a state change
	Revert(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*Entity, error)
	// Get gets an entity's current state
	Get(ctx context.Context, in *EntityRef, opts ...grpc.CallOption) (*Entity, error)
	// Del hard deletes an entity from current state store, adds it's state prior to deletion to the event log, then broadcast the event to all interested consumers(EventService.Stream)
	// an Entity may be recovered via querying the Event store for historical records of the deleted Entity.
	Del(ctx context.Context, in *EntityRef, opts ...grpc.CallOption) (*empty.Empty, error)
	// Search queries the current state of entities
	Search(ctx context.Context, in *SearchEntityOpts, opts ...grpc.CallOption) (*Entities, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) Set(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.EntityService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Edit(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/stategate.EntityService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Revert(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/stategate.EntityService/Revert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Get(ctx context.Context, in *EntityRef, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/stategate.EntityService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Del(ctx context.Context, in *EntityRef, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.EntityService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Search(ctx context.Context, in *SearchEntityOpts, opts ...grpc.CallOption) (*Entities, error) {
	out := new(Entities)
	err := c.cc.Invoke(ctx, "/stategate.EntityService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
type EntityServiceServer interface {
	// Set sets the current state value of an entity, adds it to the event log, then broadcast the event to all interested consumers(EventService.Stream)
	Set(context.Context, *Entity) (*empty.Empty, error)
	// Edit overwrites the k/v pairs present in the entity request without replacing the entire entity.
	// It then adds the state change to the event log, then broadcast the event to all interested consumers(EventService.Stream)
	// Edit returns the current state of the Entity after the mutation.
	Edit(context.Context, *Entity) (*Entity, error)
	// Revert reverts an Entity to a previous version of itself by querying the event store.
	// Reverting an entity dispatches another event since it is a state change
	Revert(context.Context, *EventRef) (*Entity, error)
	// Get gets an entity's current state
	Get(context.Context, *EntityRef) (*Entity, error)
	// Del hard deletes an entity from current state store, adds it's state prior to deletion to the event log, then broadcast the event to all interested consumers(EventService.Stream)
	// an Entity may be recovered via querying the Event store for historical records of the deleted Entity.
	Del(context.Context, *EntityRef) (*empty.Empty, error)
	// Search queries the current state of entities
	Search(context.Context, *SearchEntityOpts) (*Entities, error)
}

// UnimplementedEntityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (*UnimplementedEntityServiceServer) Set(context.Context, *Entity) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedEntityServiceServer) Edit(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedEntityServiceServer) Revert(context.Context, *EventRef) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revert not implemented")
}
func (*UnimplementedEntityServiceServer) Get(context.Context, *EntityRef) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedEntityServiceServer) Del(context.Context, *EntityRef) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedEntityServiceServer) Search(context.Context, *SearchEntityOpts) (*Entities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterEntityServiceServer(s *grpc.Server, srv EntityServiceServer) {
	s.RegisterService(&_EntityService_serviceDesc, srv)
}

func _EntityService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EntityService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Set(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EntityService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Edit(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Revert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EntityService/Revert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Revert(ctx, req.(*EventRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EntityService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Get(ctx, req.(*EntityRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EntityService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Del(ctx, req.(*EntityRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntityOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EntityService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Search(ctx, req.(*SearchEntityOpts))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stategate.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _EntityService_Set_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _EntityService_Edit_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _EntityService_Revert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EntityService_Get_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _EntityService_Del_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _EntityService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	// Stream creates an event stream/subscription to state changes to entities in real time. Glob matching is supported.
	Stream(ctx context.Context, in *StreamEventOpts, opts ...grpc.CallOption) (EventService_StreamClient, error)
	// Search queries historical events - every historical state change to an entity may be queried.
	Search(ctx context.Context, in *SearchEventOpts, opts ...grpc.CallOption) (*Events, error)
	// Get gets a single event
	Get(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*Event, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Stream(ctx context.Context, in *StreamEventOpts, opts ...grpc.CallOption) (EventService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/stategate.EventService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_StreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceStreamClient struct {
	grpc.ClientStream
}

func (x *eventServiceStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) Search(ctx context.Context, in *SearchEventOpts, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/stategate.EventService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Get(ctx context.Context, in *EventRef, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/stategate.EventService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	// Stream creates an event stream/subscription to state changes to entities in real time. Glob matching is supported.
	Stream(*StreamEventOpts, EventService_StreamServer) error
	// Search queries historical events - every historical state change to an entity may be queried.
	Search(context.Context, *SearchEventOpts) (*Events, error)
	// Get gets a single event
	Get(context.Context, *EventRef) (*Event, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) Stream(*StreamEventOpts, EventService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedEventServiceServer) Search(context.Context, *SearchEventOpts) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedEventServiceServer) Get(context.Context, *EventRef) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventOpts)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).Stream(m, &eventServiceStreamServer{stream})
}

type EventService_StreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceStreamServer struct {
	grpc.ServerStream
}

func (x *eventServiceStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEventOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EventService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Search(ctx, req.(*SearchEventOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.EventService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Get(ctx, req.(*EventRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stategate.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _EventService_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EventService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _EventService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerServiceClient interface {
	// Broadcast broadcasts a message to N subscribers(clients calling Stream)
	Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stream consumes/streams messages from message producers(clients calling broadcast)
	Stream(ctx context.Context, in *StreamMessageOpts, opts ...grpc.CallOption) (PeerService_StreamClient, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.PeerService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Stream(ctx context.Context, in *StreamMessageOpts, opts ...grpc.CallOption) (PeerService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerService_serviceDesc.Streams[0], "/stategate.PeerService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerService_StreamClient interface {
	Recv() (*PeerMessage, error)
	grpc.ClientStream
}

type peerServiceStreamClient struct {
	grpc.ClientStream
}

func (x *peerServiceStreamClient) Recv() (*PeerMessage, error) {
	m := new(PeerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServiceServer is the server API for PeerService service.
type PeerServiceServer interface {
	// Broadcast broadcasts a message to N subscribers(clients calling Stream)
	Broadcast(context.Context, *Message) (*empty.Empty, error)
	// Stream consumes/streams messages from message producers(clients calling broadcast)
	Stream(*StreamMessageOpts, PeerService_StreamServer) error
}

// UnimplementedPeerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (*UnimplementedPeerServiceServer) Broadcast(context.Context, *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedPeerServiceServer) Stream(*StreamMessageOpts, PeerService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.PeerService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Broadcast(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessageOpts)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServiceServer).Stream(m, &peerServiceStreamServer{stream})
}

type PeerService_StreamServer interface {
	Send(*PeerMessage) error
	grpc.ServerStream
}

type peerServiceStreamServer struct {
	grpc.ServerStream
}

func (x *peerServiceStreamServer) Send(m *PeerMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stategate.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _PeerService_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _PeerService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacheServiceClient interface {
	// Set sets a value in the cache
	Set(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get gets a value from the cache
	Get(ctx context.Context, in *CacheRef, opts ...grpc.CallOption) (*Cache, error)
	// Del deletes a value from the cache
	Del(ctx context.Context, in *CacheRef, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) Set(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.CacheService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) Get(ctx context.Context, in *CacheRef, opts ...grpc.CallOption) (*Cache, error) {
	out := new(Cache)
	err := c.cc.Invoke(ctx, "/stategate.CacheService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) Del(ctx context.Context, in *CacheRef, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.CacheService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
type CacheServiceServer interface {
	// Set sets a value in the cache
	Set(context.Context, *Cache) (*empty.Empty, error)
	// Get gets a value from the cache
	Get(context.Context, *CacheRef) (*Cache, error)
	// Del deletes a value from the cache
	Del(context.Context, *CacheRef) (*empty.Empty, error)
}

// UnimplementedCacheServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (*UnimplementedCacheServiceServer) Set(context.Context, *Cache) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedCacheServiceServer) Get(context.Context, *CacheRef) (*Cache, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCacheServiceServer) Del(context.Context, *CacheRef) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}

func RegisterCacheServiceServer(s *grpc.Server, srv CacheServiceServer) {
	s.RegisterService(&_CacheService_serviceDesc, srv)
}

func _CacheService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cache)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.CacheService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Set(ctx, req.(*Cache))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.CacheService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Get(ctx, req.(*CacheRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.CacheService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Del(ctx, req.(*CacheRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stategate.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _CacheService_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CacheService_Get_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _CacheService_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// MutexServiceClient is the client API for MutexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MutexServiceClient interface {
	// Lock locks a value for a period of time if it is not locked already.
	// If it is already locked, an error will be returned
	// It is best practice for client's to call Unlock when the distributed lock operation is completed instead of relying on the TTL
	Lock(ctx context.Context, in *Mutex, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlock unlocks the key(if it's currently locked) so that it may be locked again.
	// It is best practice for client's to call Unlock when the distributed lock operation is completed instead of relying on the TTL
	Unlock(ctx context.Context, in *MutexRef, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mutexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMutexServiceClient(cc grpc.ClientConnInterface) MutexServiceClient {
	return &mutexServiceClient{cc}
}

func (c *mutexServiceClient) Lock(ctx context.Context, in *Mutex, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.MutexService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutexServiceClient) Unlock(ctx context.Context, in *MutexRef, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stategate.MutexService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutexServiceServer is the server API for MutexService service.
type MutexServiceServer interface {
	// Lock locks a value for a period of time if it is not locked already.
	// If it is already locked, an error will be returned
	// It is best practice for client's to call Unlock when the distributed lock operation is completed instead of relying on the TTL
	Lock(context.Context, *Mutex) (*empty.Empty, error)
	// Unlock unlocks the key(if it's currently locked) so that it may be locked again.
	// It is best practice for client's to call Unlock when the distributed lock operation is completed instead of relying on the TTL
	Unlock(context.Context, *MutexRef) (*empty.Empty, error)
}

// UnimplementedMutexServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMutexServiceServer struct {
}

func (*UnimplementedMutexServiceServer) Lock(context.Context, *Mutex) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedMutexServiceServer) Unlock(context.Context, *MutexRef) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}

func RegisterMutexServiceServer(s *grpc.Server, srv MutexServiceServer) {
	s.RegisterService(&_MutexService_serviceDesc, srv)
}

func _MutexService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mutex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutexServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.MutexService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutexServiceServer).Lock(ctx, req.(*Mutex))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutexService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutexRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutexServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stategate.MutexService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutexServiceServer).Unlock(ctx, req.(*MutexRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _MutexService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stategate.MutexService",
	HandlerType: (*MutexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _MutexService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _MutexService_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
