// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.proto

package stategate

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/empty"
	regexp "regexp"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_ObjectRef_Domain = regexp.MustCompile(`^\S+$`)
var _regex_ObjectRef_Type = regexp.MustCompile(`^\S+$`)
var _regex_ObjectRef_Key = regexp.MustCompile(`^\S+$`)

func (this *ObjectRef) Validate() error {
	if !_regex_ObjectRef_Domain.MatchString(this.Domain) {
		return github_com_mwitkow_go_proto_validators.FieldError("Domain", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Domain))
	}
	if !_regex_ObjectRef_Type.MatchString(this.Type) {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Type))
	}
	if !_regex_ObjectRef_Key.MatchString(this.Key) {
		return github_com_mwitkow_go_proto_validators.FieldError("Key", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Key))
	}
	return nil
}

var _regex_Object_Domain = regexp.MustCompile(`^\S+$`)
var _regex_Object_Type = regexp.MustCompile(`^\S+$`)
var _regex_Object_Key = regexp.MustCompile(`^\S+$`)

func (this *Object) Validate() error {
	if !_regex_Object_Domain.MatchString(this.Domain) {
		return github_com_mwitkow_go_proto_validators.FieldError("Domain", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Domain))
	}
	if !_regex_Object_Type.MatchString(this.Type) {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Type))
	}
	if !_regex_Object_Key.MatchString(this.Key) {
		return github_com_mwitkow_go_proto_validators.FieldError("Key", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Key))
	}
	if nil == this.Values {
		return github_com_mwitkow_go_proto_validators.FieldError("Values", fmt.Errorf("message must exist"))
	}
	if this.Values != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Values); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Values", err)
		}
	}
	return nil
}
func (this *Objects) Validate() error {
	for _, item := range this.Objects {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Objects", err)
			}
		}
	}
	return nil
}

var _regex_SearchObjectOpts_Domain = regexp.MustCompile(`^\S+$`)
var _regex_SearchObjectOpts_Type = regexp.MustCompile(`^\S+$`)

func (this *SearchObjectOpts) Validate() error {
	if !_regex_SearchObjectOpts_Domain.MatchString(this.Domain) {
		return github_com_mwitkow_go_proto_validators.FieldError("Domain", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Domain))
	}
	if !_regex_SearchObjectOpts_Type.MatchString(this.Type) {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Type))
	}
	if !(this.Limit > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Limit", fmt.Errorf(`value '%v' must be greater than '0'`, this.Limit))
	}
	return nil
}

var _regex_SearchEventOpts_Domain = regexp.MustCompile(`^\S+$`)
var _regex_SearchEventOpts_Type = regexp.MustCompile(`^\S+$`)

func (this *SearchEventOpts) Validate() error {
	if !_regex_SearchEventOpts_Domain.MatchString(this.Domain) {
		return github_com_mwitkow_go_proto_validators.FieldError("Domain", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Domain))
	}
	if !_regex_SearchEventOpts_Type.MatchString(this.Type) {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Type))
	}
	if !(this.Limit > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Limit", fmt.Errorf(`value '%v' must be greater than '0'`, this.Limit))
	}
	return nil
}

var _regex_StreamOpts_Domain = regexp.MustCompile(`^\S+$`)
var _regex_StreamOpts_Type = regexp.MustCompile(`^\S+$`)

func (this *StreamOpts) Validate() error {
	if !_regex_StreamOpts_Domain.MatchString(this.Domain) {
		return github_com_mwitkow_go_proto_validators.FieldError("Domain", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Domain))
	}
	if !_regex_StreamOpts_Type.MatchString(this.Type) {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must be a string conforming to regex "^\\S+$"`, this.Type))
	}
	return nil
}

var _regex_Event_Id = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *Event) Validate() error {
	if !_regex_Event_Id.MatchString(this.Id) {
		return github_com_mwitkow_go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.Id))
	}
	if nil == this.Object {
		return github_com_mwitkow_go_proto_validators.FieldError("Object", fmt.Errorf("message must exist"))
	}
	if this.Object != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Object); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Object", err)
		}
	}
	if nil == this.Claims {
		return github_com_mwitkow_go_proto_validators.FieldError("Claims", fmt.Errorf("message must exist"))
	}
	if this.Claims != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Claims); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Claims", err)
		}
	}
	if !(this.Time > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Time", fmt.Errorf(`value '%v' must be greater than '0'`, this.Time))
	}
	return nil
}
func (this *Events) Validate() error {
	for _, item := range this.Events {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Events", err)
			}
		}
	}
	return nil
}
