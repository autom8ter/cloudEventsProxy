// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: schema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stategate {

  /// <summary>Holder for reflection information generated from schema.proto</summary>
  public static partial class SchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SCXN0YXRlZ2F0ZRocZ29vZ2xlL2FwaS9hbm5vdGF0",
            "aW9ucy5wcm90bxocZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90bxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoZZ29vZ2xlL3Byb3RvYnVm",
            "L2FueS5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGjZnaXRo",
            "dWIuY29tL213aXRrb3cvZ28tcHJvdG8tdmFsaWRhdG9ycy92YWxpZGF0b3Iu",
            "cHJvdG8iQQoITXV0ZXhSZWYSGwoGZG9tYWluGAEgASgJQgvi3x8HCgVeXFMr",
            "JBIYCgNrZXkYAiABKAlCC+LfHwcKBV5cUyskIkEKCENhY2hlUmVmEhsKBmRv",
            "bWFpbhgBIAEoCUIL4t8fBwoFXlxTKyQSGAoDa2V5GAIgASgJQgvi3x8HCgVe",
            "XFMrJCJdCglFbnRpdHlSZWYSGwoGZG9tYWluGAEgASgJQgvi3x8HCgVeXFMr",
            "JBIZCgR0eXBlGAIgASgJQgvi3x8HCgVeXFMrJBIYCgNrZXkYAyABKAlCC+Lf",
            "HwcKBV5cUyskInEKCEV2ZW50UmVmEhsKBmRvbWFpbhgBIAEoCUIL4t8fBwoF",
            "XlxTKyQSGQoEdHlwZRgCIAEoCUIL4t8fBwoFXlxTKyQSGAoDa2V5GAMgASgJ",
            "Qgvi3x8HCgVeXFMrJBITCgJpZBgEIAEoCUIH4t8fA5ABBCKLAQoGRW50aXR5",
            "EhsKBmRvbWFpbhgBIAEoCUIL4t8fBwoFXlxTKyQSGQoEdHlwZRgCIAEoCUIL",
            "4t8fBwoFXlxTKyQSGAoDa2V5GAMgASgJQgvi3x8HCgVeXFMrJBIvCgZ2YWx1",
            "ZXMYBCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qgbi3x8CIAEiaQoR",
            "U3RyZWFtTWVzc2FnZU9wdHMSGwoGZG9tYWluGAEgASgJQgvi3x8HCgVeXFMr",
            "JBIcCgdjaGFubmVsGAIgASgJQgvi3x8HCgVeXFMrJBIZCgR0eXBlGAMgASgJ",
            "Qgvi3x8HCgVeXFMrJCKOAQoHTWVzc2FnZRIbCgZkb21haW4YASABKAlCC+Lf",
            "HwcKBV5cUyskEhwKB2NoYW5uZWwYAiABKAlCC+LfHwcKBV5cUyskEhkKBHR5",
            "cGUYAyABKAlCC+LfHwcKBV5cUyskEi0KBGJvZHkYBCABKAsyFy5nb29nbGUu",
            "cHJvdG9idWYuU3RydWN0Qgbi3x8CIAEiZwoFTXV0ZXgSGwoGZG9tYWluGAEg",
            "ASgJQgvi3x8HCgVeXFMrJBIYCgNrZXkYAiABKAlCC+LfHwcKBV5cUyskEicK",
            "A2V4cBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAilgEKBUNh",
            "Y2hlEhsKBmRvbWFpbhgBIAEoCUIL4t8fBwoFXlxTKyQSGAoDa2V5GAIgASgJ",
            "Qgvi3x8HCgVeXFMrJBItCgV2YWx1ZRgDIAEoCzIWLmdvb2dsZS5wcm90b2J1",
            "Zi5WYWx1ZUIG4t8fAiABEicKA2V4cBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXAi7gEKC1BlZXJNZXNzYWdlEhMKAmlkGAEgASgJQgfi3x8D",
            "kAEEEhsKBmRvbWFpbhgCIAEoCUIL4t8fBwoFXlxTKyQSHAoHY2hhbm5lbBgD",
            "IAEoCUIL4t8fBwoFXlxTKyQSGQoEdHlwZRgEIAEoCUIL4t8fBwoFXlxTKyQS",
            "LQoEYm9keRgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCBuLfHwIg",
            "ARIvCgZjbGFpbXMYBiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qgbi",
            "3x8CIAESFAoEdGltZRgHIAEoA0IG4t8fAhAAIi8KCEVudGl0aWVzEiMKCGVu",
            "dGl0aWVzGAEgAygLMhEuc3RhdGVnYXRlLkVudGl0eSKmAQoQU2VhcmNoRW50",
            "aXR5T3B0cxIbCgZkb21haW4YASABKAlCC+LfHwcKBV5cUyskEhkKBHR5cGUY",
            "AiABKAlCC+LfHwcKBV5cUyskEhQKDHF1ZXJ5X3N0cmluZxgDIAEoCRIVCgVs",
            "aW1pdBgEIAEoBUIG4t8fAhAAEg4KBm9mZnNldBgFIAEoBRIdCgRzb3J0GAkg",
            "ASgLMg8uc3RhdGVnYXRlLlNvcnQivwEKD1NlYXJjaEV2ZW50T3B0cxIbCgZk",
            "b21haW4YASABKAlCC+LfHwcKBV5cUyskEhkKBHR5cGUYAiABKAlCC+LfHwcK",
            "BV5cUyskEhQKDHF1ZXJ5X3N0cmluZxgEIAEoCRILCgNtaW4YBSABKAMSCwoD",
            "bWF4GAYgASgDEhUKBWxpbWl0GAcgASgFQgbi3x8CEAASDgoGb2Zmc2V0GAgg",
            "ASgFEh0KBHNvcnQYCSABKAsyDy5zdGF0ZWdhdGUuU29ydCJJCg9TdHJlYW1F",
            "dmVudE9wdHMSGwoGZG9tYWluGAEgASgJQgvi3x8HCgVeXFMrJBIZCgR0eXBl",
            "GAIgASgJQgvi3x8HCgVeXFMrJCImCgRTb3J0Eg0KBWZpZWxkGAEgASgJEg8K",
            "B3JldmVyc2UYAiABKAgipgEKBUV2ZW50EhMKAmlkGAEgASgJQgfi3x8DkAEE",
            "EikKBmVudGl0eRgCIAEoCzIRLnN0YXRlZ2F0ZS5FbnRpdHlCBuLfHwIgARIW",
            "CgZtZXRob2QYBSABKAlCBuLfHwJYARIvCgZjbGFpbXMYAyABKAsyFy5nb29n",
            "bGUucHJvdG9idWYuU3RydWN0Qgbi3x8CIAESFAoEdGltZRgEIAEoA0IG4t8f",
            "AhAAIioKBkV2ZW50cxIgCgZldmVudHMYASADKAsyEC5zdGF0ZWdhdGUuRXZl",
            "bnQy0AQKDUVudGl0eVNlcnZpY2USXwoDU2V0EhEuc3RhdGVnYXRlLkVudGl0",
            "eRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSItgtPkkwInGiUvYXBpL2VudGl0",
            "eS9yZWYve2RvbWFpbn0ve3R5cGV9L3trZXl9ElsKBEVkaXQSES5zdGF0ZWdh",
            "dGUuRW50aXR5GhEuc3RhdGVnYXRlLkVudGl0eSItgtPkkwInMiUvYXBpL2Vu",
            "dGl0eS9yZWYve2RvbWFpbn0ve3R5cGV9L3trZXl9EmYKBlJldmVydBITLnN0",
            "YXRlZ2F0ZS5FdmVudFJlZhoRLnN0YXRlZ2F0ZS5FbnRpdHkiNILT5JMCLhos",
            "L2FwaS9lbnRpdHkvcmVmL3tkb21haW59L3t0eXBlfS97a2V5fS9yZXZlcnQS",
            "XQoDR2V0EhQuc3RhdGVnYXRlLkVudGl0eVJlZhoRLnN0YXRlZ2F0ZS5FbnRp",
            "dHkiLYLT5JMCJxIlL2FwaS9lbnRpdHkvcmVmL3tkb21haW59L3t0eXBlfS97",
            "a2V5fRJiCgNEZWwSFC5zdGF0ZWdhdGUuRW50aXR5UmVmGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5Ii2C0+STAicqJS9hcGkvZW50aXR5L3JlZi97ZG9tYWlu",
            "fS97dHlwZX0ve2tleX0SVgoGU2VhcmNoEhsuc3RhdGVnYXRlLlNlYXJjaEVu",
            "dGl0eU9wdHMaEy5zdGF0ZWdhdGUuRW50aXRpZXMiGoLT5JMCFBISL2FwaS9l",
            "bnRpdHkvc2VhcmNoMpgCCgxFdmVudFNlcnZpY2USUwoGU3RyZWFtEhouc3Rh",
            "dGVnYXRlLlN0cmVhbUV2ZW50T3B0cxoQLnN0YXRlZ2F0ZS5FdmVudCIZgtPk",
            "kwITEhEvYXBpL2V2ZW50L3N0cmVhbTABElIKBlNlYXJjaBIaLnN0YXRlZ2F0",
            "ZS5TZWFyY2hFdmVudE9wdHMaES5zdGF0ZWdhdGUuRXZlbnRzIhmC0+STAhMS",
            "ES9hcGkvZXZlbnQvc2VhcmNoEl8KA0dldBITLnN0YXRlZ2F0ZS5FdmVudFJl",
            "ZhoQLnN0YXRlZ2F0ZS5FdmVudCIxgtPkkwIrEikvYXBpL2V2ZW50L3JlZi97",
            "ZG9tYWlufS97dHlwZX0ve2tleX0ve2lkfTLCAQoLUGVlclNlcnZpY2USVwoJ",
            "QnJvYWRjYXN0EhIuc3RhdGVnYXRlLk1lc3NhZ2UaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiHoLT5JMCGCITL2FwaS9wZWVyL2Jyb2FkY2FzdDoBKhJaCgZT",
            "dHJlYW0SHC5zdGF0ZWdhdGUuU3RyZWFtTWVzc2FnZU9wdHMaFi5zdGF0ZWdh",
            "dGUuUGVlck1lc3NhZ2UiGILT5JMCEhIQL2FwaS9wZWVyL3N0cmVhbTABMpYC",
            "CgxDYWNoZVNlcnZpY2USVgoDU2V0EhAuc3RhdGVnYXRlLkNhY2hlGhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IiWC0+STAh8aHS9hcGkvY2FjaGUvcmVmL3tk",
            "b21haW59L3trZXl9ElMKA0dldBITLnN0YXRlZ2F0ZS5DYWNoZVJlZhoQLnN0",
            "YXRlZ2F0ZS5DYWNoZSIlgtPkkwIfEh0vYXBpL2NhY2hlL3JlZi97ZG9tYWlu",
            "fS97a2V5fRJZCgNEZWwSEy5zdGF0ZWdhdGUuQ2FjaGVSZWYaFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkiJYLT5JMCHyodL2FwaS9jYWNoZS9yZWYve2RvbWFp",
            "bn0ve2tleX0yxQEKDE11dGV4U2VydmljZRJXCgRMb2NrEhAuc3RhdGVnYXRl",
            "Lk11dGV4GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IiWC0+STAh8aHS9hcGkv",
            "bXV0ZXgvcmVmL3tkb21haW59L3trZXl9ElwKBlVubG9jaxITLnN0YXRlZ2F0",
            "ZS5NdXRleFJlZhoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIlgtPkkwIfGh0v",
            "YXBpL211dGV4L3JlZi97ZG9tYWlufS97a2V5fUILWglzdGF0ZWdhdGViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.MutexRef), global::Stategate.MutexRef.Parser, new[]{ "Domain", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.CacheRef), global::Stategate.CacheRef.Parser, new[]{ "Domain", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.EntityRef), global::Stategate.EntityRef.Parser, new[]{ "Domain", "Type", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.EventRef), global::Stategate.EventRef.Parser, new[]{ "Domain", "Type", "Key", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Entity), global::Stategate.Entity.Parser, new[]{ "Domain", "Type", "Key", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.StreamMessageOpts), global::Stategate.StreamMessageOpts.Parser, new[]{ "Domain", "Channel", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Message), global::Stategate.Message.Parser, new[]{ "Domain", "Channel", "Type", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Mutex), global::Stategate.Mutex.Parser, new[]{ "Domain", "Key", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Cache), global::Stategate.Cache.Parser, new[]{ "Domain", "Key", "Value", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.PeerMessage), global::Stategate.PeerMessage.Parser, new[]{ "Id", "Domain", "Channel", "Type", "Body", "Claims", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Entities), global::Stategate.Entities.Parser, new[]{ "Entities_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.SearchEntityOpts), global::Stategate.SearchEntityOpts.Parser, new[]{ "Domain", "Type", "QueryString", "Limit", "Offset", "Sort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.SearchEventOpts), global::Stategate.SearchEventOpts.Parser, new[]{ "Domain", "Type", "QueryString", "Min", "Max", "Limit", "Offset", "Sort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.StreamEventOpts), global::Stategate.StreamEventOpts.Parser, new[]{ "Domain", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Sort), global::Stategate.Sort.Parser, new[]{ "Field", "Reverse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Event), global::Stategate.Event.Parser, new[]{ "Id", "Entity", "Method", "Claims", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stategate.Events), global::Stategate.Events.Parser, new[]{ "Events_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// MutexRef is a reference to a distributed mutex
  /// </summary>
  public sealed partial class MutexRef : pb::IMessage<MutexRef> {
    private static readonly pb::MessageParser<MutexRef> _parser = new pb::MessageParser<MutexRef>(() => new MutexRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutexRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutexRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutexRef(MutexRef other) : this() {
      domain_ = other.domain_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutexRef Clone() {
      return new MutexRef(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the mutex's business domain(ex: accounting)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// mutex key (unique within domain)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutexRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutexRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutexRef other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CacheRef is a reference to a cached value
  /// </summary>
  public sealed partial class CacheRef : pb::IMessage<CacheRef> {
    private static readonly pb::MessageParser<CacheRef> _parser = new pb::MessageParser<CacheRef>(() => new CacheRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRef(CacheRef other) : this() {
      domain_ = other.domain_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheRef Clone() {
      return new CacheRef(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the cached value's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// cached value's key (unique within domain)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheRef other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// EntityRef is a reference to an existing entity
  /// </summary>
  public sealed partial class EntityRef : pb::IMessage<EntityRef> {
    private static readonly pb::MessageParser<EntityRef> _parser = new pb::MessageParser<EntityRef>(() => new EntityRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityRef(EntityRef other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityRef Clone() {
      return new EntityRef(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the entity's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// entity type (ex: user)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    /// <summary>
    /// entity key (unique within type)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityRef other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// EventRef holds options for reverting an entity to a previous version of itself
  /// </summary>
  public sealed partial class EventRef : pb::IMessage<EventRef> {
    private static readonly pb::MessageParser<EventRef> _parser = new pb::MessageParser<EventRef>(() => new EventRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRef(EventRef other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      key_ = other.key_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRef Clone() {
      return new EventRef(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the event's entity's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// event entity type (ex: user)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    /// <summary>
    /// event's entity's key (unique within type)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private string id_ = "";
    /// <summary>
    /// id is the event id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      if (Key != other.Key) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRef other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Entity represents a single record(k/v pairs) with a unique key with a given [type](https://en.wikipedia.org/wiki/Type_system), belonging to a particular [domain](https://en.wikipedia.org/wiki/Domain-driven_design)
  /// EventService clients should use the EntityService to persist &amp; interact with the current state of an entity.
  /// </summary>
  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      key_ = other.key_;
      values_ = other.values_ != null ? other.values_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the entity's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the entity's type (ex: user)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private string key_ = "";
    /// <summary>
    /// the entity's key (unique within type).
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Struct values_;
    /// <summary>
    /// the entity's values (k/v pairs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Values, other.Values)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (values_ != null) hash ^= Values.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Key);
      }
      if (values_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Values);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (values_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.values_ != null) {
        if (values_ == null) {
          values_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Values.MergeFrom(other.Values);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            if (values_ == null) {
              values_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(values_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// StreamMessageOpts holds options for streaming messages produced by Peers
  /// </summary>
  public sealed partial class StreamMessageOpts : pb::IMessage<StreamMessageOpts> {
    private static readonly pb::MessageParser<StreamMessageOpts> _parser = new pb::MessageParser<StreamMessageOpts>(() => new StreamMessageOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamMessageOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessageOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessageOpts(StreamMessageOpts other) : this() {
      domain_ = other.domain_;
      channel_ = other.channel_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessageOpts Clone() {
      return new StreamMessageOpts(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the message's business domain(ex: accounting) to subscribe to
    /// must not be empty or contain spaces
    /// * indicates any domain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    /// the message's channel(ex: general) to subscribe to
    /// must not be empty or contain spaces
    /// * indicates any channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// message's type (ex: comment) to subscribe to
    /// must not be empty or contain spaces
    /// * indicates any type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamMessageOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamMessageOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Channel != other.Channel) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamMessageOpts other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message is an arbitrary message to be delivered to a Peer
  /// Messages are NOT persisted and should only be used to communicate with other Peers
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      domain_ = other.domain_;
      channel_ = other.channel_;
      type_ = other.type_;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the message's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    /// the message's channel(ex: general)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// message's type (ex: comment)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Struct body_;
    /// <summary>
    /// the body of the message(k/v values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Channel != other.Channel) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (body_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            if (body_ == null) {
              body_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Mutex is a distributed mutex for preventing data-races amongst peer services
  /// </summary>
  public sealed partial class Mutex : pb::IMessage<Mutex> {
    private static readonly pb::MessageParser<Mutex> _parser = new pb::MessageParser<Mutex>(() => new Mutex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mutex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutex(Mutex other) : this() {
      domain_ = other.domain_;
      key_ = other.key_;
      exp_ = other.exp_ != null ? other.exp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutex Clone() {
      return new Mutex(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the mutex's business domain(ex: accounting)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// mutex key (unique within domain)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp exp_;
    /// <summary>
    /// exp is the time at which the mutex value will expire
    /// if exp is 0, the mutex will never expire
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mutex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mutex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Exp, other.Exp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (exp_ != null) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (exp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (exp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mutex other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.exp_ != null) {
        if (exp_ == null) {
          exp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Exp.MergeFrom(other.Exp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 34: {
            if (exp_ == null) {
              exp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(exp_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cache is a persisted value that will expire after a period of time. It is held in memory for maximum performance.
  /// </summary>
  public sealed partial class Cache : pb::IMessage<Cache> {
    private static readonly pb::MessageParser<Cache> _parser = new pb::MessageParser<Cache>(() => new Cache());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cache(Cache other) : this() {
      domain_ = other.domain_;
      key_ = other.key_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      exp_ = other.exp_ != null ? other.exp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cache Clone() {
      return new Cache(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the cached value's business domain(ex: accounting)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// the cached value's key (unique within domain)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value value_;
    /// <summary>
    /// the cached value's value to store
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp exp_;
    /// <summary>
    /// exp is the time at which the cached value will expire
    /// if exp is 0, the value will never expire
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(Exp, other.Exp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (exp_ != null) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
      if (exp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (exp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cache other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.exp_ != null) {
        if (exp_ == null) {
          exp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Exp.MergeFrom(other.Exp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(value_);
            break;
          }
          case 34: {
            if (exp_ == null) {
              exp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(exp_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PeerMessage is a message produced by a client to the PeerService
  /// PeerMessages are NOT persisted and should only be used to communicate with other Peers
  /// </summary>
  public sealed partial class PeerMessage : pb::IMessage<PeerMessage> {
    private static readonly pb::MessageParser<PeerMessage> _parser = new pb::MessageParser<PeerMessage>(() => new PeerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerMessage(PeerMessage other) : this() {
      id_ = other.id_;
      domain_ = other.domain_;
      channel_ = other.channel_;
      type_ = other.type_;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      claims_ = other.claims_ != null ? other.claims_.Clone() : null;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerMessage Clone() {
      return new PeerMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// the unique id of the message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 2;
    private string domain_ = "";
    /// <summary>
    /// the message's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private string channel_ = "";
    /// <summary>
    /// the message's channel(ex: general)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    /// <summary>
    /// message's type (ex: comment)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Struct body_;
    /// <summary>
    /// the body of the message(k/v values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    /// <summary>Field number for the "claims" field.</summary>
    public const int ClaimsFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Struct claims_;
    /// <summary>
    /// the authentication claims of the message producer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Claims {
      get { return claims_; }
      set {
        claims_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    /// <summary>
    /// timestamp(ns) of when the message was broadcasted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Domain != other.Domain) return false;
      if (Channel != other.Channel) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Body, other.Body)) return false;
      if (!object.Equals(Claims, other.Claims)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (claims_ != null) hash ^= Claims.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Domain);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (body_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Body);
      }
      if (claims_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Claims);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (claims_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Claims);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Body.MergeFrom(other.Body);
      }
      if (other.claims_ != null) {
        if (claims_ == null) {
          claims_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Claims.MergeFrom(other.Claims);
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Domain = input.ReadString();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            if (body_ == null) {
              body_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(body_);
            break;
          }
          case 50: {
            if (claims_ == null) {
              claims_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(claims_);
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Entities is an array of Entity
  /// </summary>
  public sealed partial class Entities : pb::IMessage<Entities> {
    private static readonly pb::MessageParser<Entities> _parser = new pb::MessageParser<Entities>(() => new Entities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entities(Entities other) : this() {
      entities_ = other.entities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entities Clone() {
      return new Entities(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int Entities_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stategate.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Stategate.Entity.Parser);
    private readonly pbc::RepeatedField<global::Stategate.Entity> entities_ = new pbc::RepeatedField<global::Stategate.Entity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stategate.Entity> Entities_ {
      get { return entities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entities_.WriteTo(output, _repeated_entities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entities other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SearchEntityOpts are options when querying the current values of entities.
  /// If historical values are needed, SearchEvents should be used
  /// </summary>
  public sealed partial class SearchEntityOpts : pb::IMessage<SearchEntityOpts> {
    private static readonly pb::MessageParser<SearchEntityOpts> _parser = new pb::MessageParser<SearchEntityOpts>(() => new SearchEntityOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchEntityOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchEntityOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchEntityOpts(SearchEntityOpts other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      queryString_ = other.queryString_;
      limit_ = other.limit_;
      offset_ = other.offset_;
      sort_ = other.sort_ != null ? other.sort_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchEntityOpts Clone() {
      return new SearchEntityOpts(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the entity's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// State type (ex: user)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_string" field.</summary>
    public const int QueryStringFieldNumber = 3;
    private string queryString_ = "";
    /// <summary>
    /// json string to filter records that have values match k/v pairs ex: { "message": "hello world" }
    /// please note that dot notation may be used to access nested fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryString {
      get { return queryString_; }
      set {
        queryString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 4;
    private int limit_;
    /// <summary>
    /// limit number of returned values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private int offset_;
    /// <summary>
    /// offset returned events(pagination)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 9;
    private global::Stategate.Sort sort_;
    /// <summary>
    /// sort sorts the returned entities by a specified field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stategate.Sort Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchEntityOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchEntityOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      if (QueryString != other.QueryString) return false;
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      if (!object.Equals(Sort, other.Sort)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (QueryString.Length != 0) hash ^= QueryString.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (sort_ != null) hash ^= Sort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (QueryString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueryString);
      }
      if (Limit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Offset);
      }
      if (sort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (QueryString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryString);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (sort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchEntityOpts other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.QueryString.Length != 0) {
        QueryString = other.QueryString;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.sort_ != null) {
        if (sort_ == null) {
          sort_ = new global::Stategate.Sort();
        }
        Sort.MergeFrom(other.Sort);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            QueryString = input.ReadString();
            break;
          }
          case 32: {
            Limit = input.ReadInt32();
            break;
          }
          case 40: {
            Offset = input.ReadInt32();
            break;
          }
          case 74: {
            if (sort_ == null) {
              sort_ = new global::Stategate.Sort();
            }
            input.ReadMessage(sort_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SearchEventOpts are options when querying historical events emitted from mutations made from State mutations
  /// </summary>
  public sealed partial class SearchEventOpts : pb::IMessage<SearchEventOpts> {
    private static readonly pb::MessageParser<SearchEventOpts> _parser = new pb::MessageParser<SearchEventOpts>(() => new SearchEventOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchEventOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchEventOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchEventOpts(SearchEventOpts other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      queryString_ = other.queryString_;
      min_ = other.min_;
      max_ = other.max_;
      limit_ = other.limit_;
      offset_ = other.offset_;
      sort_ = other.sort_ != null ? other.sort_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchEventOpts Clone() {
      return new SearchEventOpts(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the entity's business domain(ex: accounting)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// entity's type (ex: user)
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_string" field.</summary>
    public const int QueryStringFieldNumber = 4;
    private string queryString_ = "";
    /// <summary>
    /// json string to filter events based with values that match k/v pairs ex: { "entity.values.message": "hello world" }.
    /// please note that dot notation may be used to access nested fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryString {
      get { return queryString_; }
      set {
        queryString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 5;
    private long min_;
    /// <summary>
    /// only return events that occurred after specified min timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 6;
    private long max_;
    /// <summary>
    /// only return events that occurred before specified max timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 7;
    private int limit_;
    /// <summary>
    /// limit number of returned values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 8;
    private int offset_;
    /// <summary>
    /// offset returned events(pagination)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 9;
    private global::Stategate.Sort sort_;
    /// <summary>
    /// sort sorts the returned entities by a specified field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stategate.Sort Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchEventOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchEventOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      if (QueryString != other.QueryString) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      if (!object.Equals(Sort, other.Sort)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (QueryString.Length != 0) hash ^= QueryString.GetHashCode();
      if (Min != 0L) hash ^= Min.GetHashCode();
      if (Max != 0L) hash ^= Max.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (sort_ != null) hash ^= Sort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (QueryString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(QueryString);
      }
      if (Min != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Min);
      }
      if (Max != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Max);
      }
      if (Limit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Offset);
      }
      if (sort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (QueryString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryString);
      }
      if (Min != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Min);
      }
      if (Max != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (sort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchEventOpts other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.QueryString.Length != 0) {
        QueryString = other.QueryString;
      }
      if (other.Min != 0L) {
        Min = other.Min;
      }
      if (other.Max != 0L) {
        Max = other.Max;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.sort_ != null) {
        if (sort_ == null) {
          sort_ = new global::Stategate.Sort();
        }
        Sort.MergeFrom(other.Sort);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            QueryString = input.ReadString();
            break;
          }
          case 40: {
            Min = input.ReadInt64();
            break;
          }
          case 48: {
            Max = input.ReadInt64();
            break;
          }
          case 56: {
            Limit = input.ReadInt32();
            break;
          }
          case 64: {
            Offset = input.ReadInt32();
            break;
          }
          case 74: {
            if (sort_ == null) {
              sort_ = new global::Stategate.Sort();
            }
            input.ReadMessage(sort_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// StreamEventOpts are options for consumers looking to stream events.
  /// Events are automatically emitted from mutations made from State mutations within the EntityService
  /// </summary>
  public sealed partial class StreamEventOpts : pb::IMessage<StreamEventOpts> {
    private static readonly pb::MessageParser<StreamEventOpts> _parser = new pb::MessageParser<StreamEventOpts>(() => new StreamEventOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamEventOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventOpts(StreamEventOpts other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventOpts Clone() {
      return new StreamEventOpts(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// the domain of the entity (ex: acme) that triggered the event
    /// * indicates any domain
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the type of the entity (ex: user) that triggered the event
    /// * indicates any type
    /// must not be empty or contain spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamEventOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamEventOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamEventOpts other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sort is a primitive used to sort an array
  /// </summary>
  public sealed partial class Sort : pb::IMessage<Sort> {
    private static readonly pb::MessageParser<Sort> _parser = new pb::MessageParser<Sort>(() => new Sort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sort(Sort other) : this() {
      field_ = other.field_;
      reverse_ = other.reverse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sort Clone() {
      return new Sort(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private string field_ = "";
    /// <summary>
    /// field is a field to sort the array by
    /// please note that dot notation may be used to access nested fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reverse" field.</summary>
    public const int ReverseFieldNumber = 2;
    private bool reverse_;
    /// <summary>
    /// reverse reverses the direction of the sort
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reverse {
      get { return reverse_; }
      set {
        reverse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field != other.Field) return false;
      if (Reverse != other.Reverse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (Reverse != false) hash ^= Reverse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Field.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Field);
      }
      if (Reverse != false) {
        output.WriteRawTag(16);
        output.WriteBool(Reverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (Reverse != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sort other) {
      if (other == null) {
        return;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.Reverse != false) {
        Reverse = other.Reverse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Field = input.ReadString();
            break;
          }
          case 16: {
            Reverse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Event is primitive that represents a single state change to an entity
  /// Events are persisted to history &amp; broadcasted to interested consumers(Stream) any time an entity is created/modified/deleted
  /// Events are immutable after creation and may be searched.
  /// EventService client's may search events to query previous state of an entity(s)
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      id_ = other.id_;
      entity_ = other.entity_ != null ? other.entity_.Clone() : null;
      method_ = other.method_;
      claims_ = other.claims_ != null ? other.claims_.Clone() : null;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// identifies the event(uuid v4).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 2;
    private global::Stategate.Entity entity_;
    /// <summary>
    /// state of an Entity after it has been mutated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stategate.Entity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 5;
    private string method_ = "";
    /// <summary>
    /// the invoked method that triggered the event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "claims" field.</summary>
    public const int ClaimsFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct claims_;
    /// <summary>
    /// the authentication claims of the event producer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Claims {
      get { return claims_; }
      set {
        claims_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// timestamp(ns) of when the event was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Entity, other.Entity)) return false;
      if (Method != other.Method) return false;
      if (!object.Equals(Claims, other.Claims)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (claims_ != null) hash ^= Claims.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (entity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Entity);
      }
      if (claims_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Claims);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Method);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (claims_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Claims);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          entity_ = new global::Stategate.Entity();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.claims_ != null) {
        if (claims_ == null) {
          claims_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Claims.MergeFrom(other.Claims);
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (entity_ == null) {
              entity_ = new global::Stategate.Entity();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 26: {
            if (claims_ == null) {
              claims_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(claims_);
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 42: {
            Method = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Events is an array of events
  /// </summary>
  public sealed partial class Events : pb::IMessage<Events> {
    private static readonly pb::MessageParser<Events> _parser = new pb::MessageParser<Events>(() => new Events());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Events> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stategate.SchemaReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Events() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Events(Events other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Events Clone() {
      return new Events(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int Events_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stategate.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Stategate.Event.Parser);
    private readonly pbc::RepeatedField<global::Stategate.Event> events_ = new pbc::RepeatedField<global::Stategate.Event>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stategate.Event> Events_ {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Events);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Events other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Events other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
