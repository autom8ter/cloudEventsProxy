{
  "swagger": "2.0",
  "info": {
    "title": "schema.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/events/search": {
      "get": {
        "summary": "Search queries events related to a specific application state value.",
        "operationId": "EventService_Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stategateEvents"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "the application state value's business domain(ex: accounting).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "State type (ex: user).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "key",
            "description": "filter events belonging to a particular application state value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "queryString",
            "description": "json string to filter records that have application state value's with values that match k/v pairs ex: { \"message\": \"hello world\" }.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "min",
            "description": "only return application state value events that occurred after specified min timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "max",
            "description": "only return application state value events that occurred before specified max timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "limit returned application state value events.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "offset returned application state value events(pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/api/events/stream": {
      "get": {
        "summary": "Stream creates an event stream/subscription to a given state type/domain. Glob matching is supported.",
        "operationId": "EventService_Stream",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/stategateEvent"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of stategateEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "the domain of the application state value (ex: acme) that triggered the event\n* indicates any domain.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "the type of the application state value (ex: user) that triggered the event\n* indicates any type.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/api/state/ref/{domain}/{type}/{key}": {
      "get": {
        "summary": "Get gets an application state value's current state values",
        "operationId": "StateService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stategateState"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "the application state value's business domain(ex: accounting)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "State type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "State key (unique within type)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StateService"
        ]
      },
      "delete": {
        "summary": "Del hard deletes current state. State may be recovered via the Event store.",
        "operationId": "StateService_Del",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "the application state value's business domain(ex: accounting)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "State type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "State key (unique within type)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StateService"
        ]
      },
      "post": {
        "summary": "Set sets the current state value of an application state value, adds it to the event log, then broadcast the event to all interested consumers",
        "operationId": "StateService_Set",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "the application state value's business domain(ex: accounting)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "State type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "State key (unique within type)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StateService"
        ]
      }
    },
    "/api/state/search": {
      "get": {
        "summary": "Search queries state belonging to a particular domain \u0026 of a specific type",
        "operationId": "StateService_Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stategateStateValues"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "the application state value's business domain(ex: accounting).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "State type (ex: user).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "queryString",
            "description": "json string to filter records that have values match k/v pairs ex: { \"message\": \"hello world\" }.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "limit returned state.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "offset returned events(pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "StateService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "stategateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifies the event(uuid)."
        },
        "state": {
          "$ref": "#/definitions/stategateState",
          "title": "state after it has been mutated"
        },
        "claims": {
          "type": "object",
          "description": "The authentication claims of the event producer."
        },
        "time": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(ns) of when the event was received."
        }
      },
      "title": "Event is primitive that represents a single state change\nEvents are persisted to history \u0026 broadcasted to interested consumers(Stream) any time an application state value is created/modified\nEvents are immutable after creation and may be searched.\nEvent Consumers may search events to query previous state"
    },
    "stategateEvents": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stategateEvent"
          }
        }
      },
      "title": "Events is an array of events"
    },
    "stategateState": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "the application state value's business domain(ex: accounting)"
        },
        "type": {
          "type": "string",
          "title": "State type (ex: user)"
        },
        "key": {
          "type": "string",
          "title": "State key (unique within type)"
        },
        "values": {
          "type": "object",
          "title": "State values (k/v pairs)"
        }
      },
      "description": "State represents a single record(k/v pairs) with a unique key with a given [type](https://en.wikipedia.org/wiki/Type_system), belonging to a particular [domain](https://en.wikipedia.org/wiki/Domain-driven_design)\nServices/Users should use state related methods to persist \u0026 interact with the current state of an application/domain."
    },
    "stategateStateValues": {
      "type": "object",
      "properties": {
        "stateValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stategateState"
          }
        }
      },
      "title": "States is an array of State"
    }
  }
}
