{
  "swagger": "2.0",
  "info": {
    "title": "schema.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/{tenant}/{type}/events": {
      "get": {
        "summary": "SearchEvents queries events related to a specific object.",
        "operationId": "StateGateService_SearchEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stategateEvents"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "the object's tenant(ex: acme)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Object type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "filter events belonging to a particular object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "min",
            "description": "only return object events that occurred after specified min timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "max",
            "description": "only return object events that occurred before specified max timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "limit returned object events.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "offset returned object events(pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "StateGateService"
        ]
      }
    },
    "/api/{tenant}/{type}/events/stream": {
      "get": {
        "summary": "StreamEvents creates an event stream/subscription to a given object type until fn returns false OR the context cancels.\nEvent Consumers invoke this method.",
        "operationId": "StateGateService_StreamEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/stategateEvent"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of stategateEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "the tenant of the object (ex: acme) that triggered the event",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "the type of the object (ex: user) that triggered the event",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StateGateService"
        ]
      }
    },
    "/api/{tenant}/{type}/state": {
      "get": {
        "summary": "SearchObjects queries objects of a specific type",
        "operationId": "StateGateService_SearchObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stategateObjects"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "the object's tenant(ex: acme)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Object type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "queryString",
            "description": "json string to filter records that have values match k/v pairs ex: { \"message\": \"hello world\" }.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "limit returned objects.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "offset returned events(pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "StateGateService"
        ]
      },
      "delete": {
        "summary": "DelObject hard deletes an object \u0026 all of it's events",
        "operationId": "StateGateService_DelObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "the object's tenant(ex: acme)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Object type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "Object key (unique within type).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StateGateService"
        ]
      }
    },
    "/api/{tenant}/{type}/state/{key}": {
      "get": {
        "summary": "GetObject gets an object's current state values",
        "operationId": "StateGateService_GetObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/stategateObject"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "the object's tenant(ex: acme)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Object type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "Object key (unique within type)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StateGateService"
        ]
      },
      "post": {
        "summary": "SetObject sets the current state value of an object, adds it to the event log, then broadcast the event to all interested consumers",
        "operationId": "StateGateService_SetObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "the object's tenant(ex: acme)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Object type (ex: user)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "Object key (unique within type)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StateGateService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "stategateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifies the event(uuid)."
        },
        "object": {
          "$ref": "#/definitions/stategateObject",
          "title": "the unmodified"
        },
        "claims": {
          "type": "object",
          "description": "The authentication claims of the event producer."
        },
        "time": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(ns) of when the event was received."
        }
      },
      "title": "Event is primitive that represents a single state change to an object, who triggered it, and the time it occurred.\nEvents are persisted to history \u0026 broadcasted to interested consumers(Stream) any time an object is created/modified"
    },
    "stategateEvents": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stategateEvent"
          }
        }
      },
      "title": "Events is an array of events"
    },
    "stategateObject": {
      "type": "object",
      "properties": {
        "tenant": {
          "type": "string",
          "title": "the object's tenant(ex: acme)"
        },
        "type": {
          "type": "string",
          "title": "Object type (ex: user)"
        },
        "key": {
          "type": "string",
          "title": "Object key (unique within type)"
        },
        "values": {
          "type": "object",
          "title": "Object values (structured k/v pairs)"
        }
      },
      "title": "Object hold's the current state of an object"
    },
    "stategateObjects": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stategateObject"
          }
        }
      },
      "title": "Objects is an array of Object"
    }
  }
}
